// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Metric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Metric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Metric must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Metric", id.toString(), this);
    }
  }

  static load(id: string): Metric | null {
    return changetype<Metric | null>(store.get("Metric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get templars(): i32 {
    let value = this.get("templars");
    return value!.toI32();
  }

  set templars(value: i32) {
    this.set("templars", Value.fromI32(value));
  }

  get candidates(): i32 {
    let value = this.get("candidates");
    return value!.toI32();
  }

  set candidates(value: i32) {
    this.set("candidates", Value.fromI32(value));
  }

  get endorsments(): i32 {
    let value = this.get("endorsments");
    return value!.toI32();
  }

  set endorsments(value: i32) {
    this.set("endorsments", Value.fromI32(value));
  }

  get templarBaseUri(): string {
    let value = this.get("templarBaseUri");
    return value!.toString();
  }

  set templarBaseUri(value: string) {
    this.set("templarBaseUri", Value.fromString(value));
  }
}

export class MetricData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MetricData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetricData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MetricData", id.toString(), this);
    }
  }

  static load(id: string): MetricData | null {
    return changetype<MetricData | null>(store.get("MetricData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get metric(): string {
    let value = this.get("metric");
    return value!.toString();
  }

  set metric(value: string) {
    this.set("metric", Value.fromString(value));
  }

  get templars(): i32 {
    let value = this.get("templars");
    return value!.toI32();
  }

  set templars(value: i32) {
    this.set("templars", Value.fromI32(value));
  }

  get candidates(): i32 {
    let value = this.get("candidates");
    return value!.toI32();
  }

  set candidates(value: i32) {
    this.set("candidates", Value.fromI32(value));
  }

  get endorsments(): i32 {
    let value = this.get("endorsments");
    return value!.toI32();
  }

  set endorsments(value: i32) {
    this.set("endorsments", Value.fromI32(value));
  }

  get templarBaseUri(): string {
    let value = this.get("templarBaseUri");
    return value!.toString();
  }

  set templarBaseUri(value: string) {
    this.set("templarBaseUri", Value.fromString(value));
  }
}

export class Templar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Templar entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Templar must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Templar", id.toString(), this);
    }
  }

  static load(id: string): Templar | null {
    return changetype<Templar | null>(store.get("Templar", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get role(): string | null {
    let value = this.get("role");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set role(value: string | null) {
    if (!value) {
      this.unset("role");
    } else {
      this.set("role", Value.fromString(<string>value));
    }
  }

  get isNominated(): boolean {
    let value = this.get("isNominated");
    return value!.toBoolean();
  }

  set isNominated(value: boolean) {
    this.set("isNominated", Value.fromBoolean(value));
  }

  get endorsments(): Array<string> {
    let value = this.get("endorsments");
    return value!.toStringArray();
  }

  set endorsments(value: Array<string>) {
    this.set("endorsments", Value.fromStringArray(value));
  }
}

export class TemplarData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TemplarData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TemplarData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TemplarData", id.toString(), this);
    }
  }

  static load(id: string): TemplarData | null {
    return changetype<TemplarData | null>(store.get("TemplarData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get templar(): string {
    let value = this.get("templar");
    return value!.toString();
  }

  set templar(value: string) {
    this.set("templar", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get role(): string | null {
    let value = this.get("role");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set role(value: string | null) {
    if (!value) {
      this.unset("role");
    } else {
      this.set("role", Value.fromString(<string>value));
    }
  }

  get isNominated(): boolean {
    let value = this.get("isNominated");
    return value!.toBoolean();
  }

  set isNominated(value: boolean) {
    this.set("isNominated", Value.fromBoolean(value));
  }
}

export class Endorser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Endorser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Endorser must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Endorser", id.toString(), this);
    }
  }

  static load(id: string): Endorser | null {
    return changetype<Endorser | null>(store.get("Endorser", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get validEndorsments(): i32 {
    let value = this.get("validEndorsments");
    return value!.toI32();
  }

  set validEndorsments(value: i32) {
    this.set("validEndorsments", Value.fromI32(value));
  }

  get endorsedCandidates(): Array<string> {
    let value = this.get("endorsedCandidates");
    return value!.toStringArray();
  }

  set endorsedCandidates(value: Array<string>) {
    this.set("endorsedCandidates", Value.fromStringArray(value));
  }
}

export class EndorserData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndorserData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EndorserData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndorserData", id.toString(), this);
    }
  }

  static load(id: string): EndorserData | null {
    return changetype<EndorserData | null>(store.get("EndorserData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get endorser(): string {
    let value = this.get("endorser");
    return value!.toString();
  }

  set endorser(value: string) {
    this.set("endorser", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get validEndorsments(): i32 {
    let value = this.get("validEndorsments");
    return value!.toI32();
  }

  set validEndorsments(value: i32) {
    this.set("validEndorsments", Value.fromI32(value));
  }

  get endorsedCandidates(): Array<string> {
    let value = this.get("endorsedCandidates");
    return value!.toStringArray();
  }

  set endorsedCandidates(value: Array<string>) {
    this.set("endorsedCandidates", Value.fromStringArray(value));
  }
}

export class Endorsement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Endorsement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Endorsement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Endorsement", id.toString(), this);
    }
  }

  static load(id: string): Endorsement | null {
    return changetype<Endorsement | null>(store.get("Endorsement", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get templar(): string {
    let value = this.get("templar");
    return value!.toString();
  }

  set templar(value: string) {
    this.set("templar", Value.fromString(value));
  }
}

export class Nomination extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Nomination entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Nomination must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Nomination", id.toString(), this);
    }
  }

  static load(id: string): Nomination | null {
    return changetype<Nomination | null>(store.get("Nomination", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get templar(): string {
    let value = this.get("templar");
    return value!.toString();
  }

  set templar(value: string) {
    this.set("templar", Value.fromString(value));
  }

  get isNominated(): boolean {
    let value = this.get("isNominated");
    return value!.toBoolean();
  }

  set isNominated(value: boolean) {
    this.set("isNominated", Value.fromBoolean(value));
  }
}
