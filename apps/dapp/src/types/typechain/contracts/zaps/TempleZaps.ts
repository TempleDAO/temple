/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace TempleZaps {
  export type TempleLiquidityParamsStruct = {
    amountAMin: PromiseOrValue<BigNumberish>;
    amountBMin: PromiseOrValue<BigNumberish>;
    lpSwapMinAmountOut: PromiseOrValue<BigNumberish>;
    stableToken: PromiseOrValue<string>;
    transferResidual: PromiseOrValue<boolean>;
  };

  export type TempleLiquidityParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    amountAMin: BigNumber;
    amountBMin: BigNumber;
    lpSwapMinAmountOut: BigNumber;
    stableToken: string;
    transferResidual: boolean;
  };
}

export interface TempleZapsInterface extends utils.Interface {
  functions: {
    "approvedTargets(address,address)": FunctionFragment;
    "getAmountToSwap(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "recoverToken(address,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setApprovedTargets(address[],address[],bool[])": FunctionFragment;
    "setSupportedStables(address[],bool[])": FunctionFragment;
    "setTempleRouter(address)": FunctionFragment;
    "setZaps(address)": FunctionFragment;
    "supportedStables(address)": FunctionFragment;
    "temple()": FunctionFragment;
    "templeRouter()": FunctionFragment;
    "toggleContractActive()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "zapInTemple(address,uint256,uint256,address,uint256,address,bytes)": FunctionFragment;
    "zapInTempleFor(address,uint256,uint256,address,uint256,address,address,bytes)": FunctionFragment;
    "zapInTempleLP(address,uint256,uint256,address,(uint256,uint256,uint256,address,bool),bytes)": FunctionFragment;
    "zapInTempleLPFor(address,uint256,uint256,address,address,(uint256,uint256,uint256,address,bool),bytes)": FunctionFragment;
    "zapInVault(address,uint256,uint256,address,uint256,address,address,bytes)": FunctionFragment;
    "zapInVaultFor(address,uint256,uint256,address,uint256,address,address,address,bytes)": FunctionFragment;
    "zaps()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approvedTargets"
      | "getAmountToSwap"
      | "owner"
      | "paused"
      | "recoverToken"
      | "renounceOwnership"
      | "setApprovedTargets"
      | "setSupportedStables"
      | "setTempleRouter"
      | "setZaps"
      | "supportedStables"
      | "temple"
      | "templeRouter"
      | "toggleContractActive"
      | "transferOwnership"
      | "zapInTemple"
      | "zapInTempleFor"
      | "zapInTempleLP"
      | "zapInTempleLPFor"
      | "zapInVault"
      | "zapInVaultFor"
      | "zaps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approvedTargets",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountToSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedTargets",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedStables",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTempleRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setZaps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedStables",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "temple", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "templeRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleContractActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "zapInTemple",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapInTempleFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapInTempleLP",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      TempleZaps.TempleLiquidityParamsStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapInTempleLPFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      TempleZaps.TempleLiquidityParamsStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapInVault",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapInVaultFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "zaps", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "approvedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountToSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedStables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTempleRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setZaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedStables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "temple", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "templeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleContractActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zapInTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zapInTempleFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zapInTempleLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zapInTempleLPFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zapInVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zapInVaultFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zaps", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetContractState(bool)": EventFragment;
    "SetTempleRouter(address)": EventFragment;
    "SetZaps(address)": EventFragment;
    "TokenRecovered(address,address,uint256)": EventFragment;
    "ZappedInTempleLP(address,address,uint256,uint256,uint256)": EventFragment;
    "ZappedTempleInVault(address,address,uint256,uint256)": EventFragment;
    "ZappedTemplePlusFaithInVault(address,address,uint256,uint112,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetContractState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTempleRouter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetZaps"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRecovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZappedInTempleLP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZappedTempleInVault"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ZappedTemplePlusFaithInVault"
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetContractStateEventObject {
  paused: boolean;
}
export type SetContractStateEvent = TypedEvent<
  [boolean],
  SetContractStateEventObject
>;

export type SetContractStateEventFilter =
  TypedEventFilter<SetContractStateEvent>;

export interface SetTempleRouterEventObject {
  router: string;
}
export type SetTempleRouterEvent = TypedEvent<
  [string],
  SetTempleRouterEventObject
>;

export type SetTempleRouterEventFilter = TypedEventFilter<SetTempleRouterEvent>;

export interface SetZapsEventObject {
  zaps: string;
}
export type SetZapsEvent = TypedEvent<[string], SetZapsEventObject>;

export type SetZapsEventFilter = TypedEventFilter<SetZapsEvent>;

export interface TokenRecoveredEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type TokenRecoveredEvent = TypedEvent<
  [string, string, BigNumber],
  TokenRecoveredEventObject
>;

export type TokenRecoveredEventFilter = TypedEventFilter<TokenRecoveredEvent>;

export interface ZappedInTempleLPEventObject {
  recipient: string;
  fromAddress: string;
  fromAmount: BigNumber;
  amountA: BigNumber;
  amountB: BigNumber;
}
export type ZappedInTempleLPEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ZappedInTempleLPEventObject
>;

export type ZappedInTempleLPEventFilter =
  TypedEventFilter<ZappedInTempleLPEvent>;

export interface ZappedTempleInVaultEventObject {
  sender: string;
  fromToken: string;
  fromAmount: BigNumber;
  templeAmount: BigNumber;
}
export type ZappedTempleInVaultEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ZappedTempleInVaultEventObject
>;

export type ZappedTempleInVaultEventFilter =
  TypedEventFilter<ZappedTempleInVaultEvent>;

export interface ZappedTemplePlusFaithInVaultEventObject {
  sender: string;
  fromToken: string;
  fromAmount: BigNumber;
  faithAmount: BigNumber;
  boostedAmount: BigNumber;
}
export type ZappedTemplePlusFaithInVaultEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ZappedTemplePlusFaithInVaultEventObject
>;

export type ZappedTemplePlusFaithInVaultEventFilter =
  TypedEventFilter<ZappedTemplePlusFaithInVaultEvent>;

export interface TempleZaps extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TempleZapsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvedTargets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAmountToSwap(
      _token: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovedTargets(
      _tokens: PromiseOrValue<string>[],
      _targets: PromiseOrValue<string>[],
      _isApproved: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSupportedStables(
      _stables: PromiseOrValue<string>[],
      _supported: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTempleRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setZaps(
      _zaps: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedStables(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    temple(overrides?: CallOverrides): Promise<[string]>;

    templeRouter(overrides?: CallOverrides): Promise<[string]>;

    toggleContractActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapInTemple(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapInTempleFor(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapInTempleLP(
      _fromAddress: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _swapTarget: PromiseOrValue<string>,
      _params: TempleZaps.TempleLiquidityParamsStruct,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapInTempleLPFor(
      _fromAddress: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _for: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _params: TempleZaps.TempleLiquidityParamsStruct,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapInVault(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _vault: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapInVaultFor(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _vault: PromiseOrValue<string>,
      _for: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zaps(overrides?: CallOverrides): Promise<[string]>;
  };

  approvedTargets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAmountToSwap(
    _token: PromiseOrValue<string>,
    _pair: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  recoverToken(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovedTargets(
    _tokens: PromiseOrValue<string>[],
    _targets: PromiseOrValue<string>[],
    _isApproved: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSupportedStables(
    _stables: PromiseOrValue<string>[],
    _supported: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTempleRouter(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setZaps(
    _zaps: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedStables(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  temple(overrides?: CallOverrides): Promise<string>;

  templeRouter(overrides?: CallOverrides): Promise<string>;

  toggleContractActive(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapInTemple(
    _fromToken: PromiseOrValue<string>,
    _fromAmount: PromiseOrValue<BigNumberish>,
    _minTempleReceived: PromiseOrValue<BigNumberish>,
    _stableToken: PromiseOrValue<string>,
    _minStableReceived: PromiseOrValue<BigNumberish>,
    _swapTarget: PromiseOrValue<string>,
    _swapData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapInTempleFor(
    _fromToken: PromiseOrValue<string>,
    _fromAmount: PromiseOrValue<BigNumberish>,
    _minTempleReceived: PromiseOrValue<BigNumberish>,
    _stableToken: PromiseOrValue<string>,
    _minStableReceived: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _swapTarget: PromiseOrValue<string>,
    _swapData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapInTempleLP(
    _fromAddress: PromiseOrValue<string>,
    _fromAmount: PromiseOrValue<BigNumberish>,
    _minAmountOut: PromiseOrValue<BigNumberish>,
    _swapTarget: PromiseOrValue<string>,
    _params: TempleZaps.TempleLiquidityParamsStruct,
    _swapData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapInTempleLPFor(
    _fromAddress: PromiseOrValue<string>,
    _fromAmount: PromiseOrValue<BigNumberish>,
    _minAmountOut: PromiseOrValue<BigNumberish>,
    _for: PromiseOrValue<string>,
    _swapTarget: PromiseOrValue<string>,
    _params: TempleZaps.TempleLiquidityParamsStruct,
    _swapData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapInVault(
    _fromToken: PromiseOrValue<string>,
    _fromAmount: PromiseOrValue<BigNumberish>,
    _minTempleReceived: PromiseOrValue<BigNumberish>,
    _stableToken: PromiseOrValue<string>,
    _minStableReceived: PromiseOrValue<BigNumberish>,
    _vault: PromiseOrValue<string>,
    _swapTarget: PromiseOrValue<string>,
    _swapData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapInVaultFor(
    _fromToken: PromiseOrValue<string>,
    _fromAmount: PromiseOrValue<BigNumberish>,
    _minTempleReceived: PromiseOrValue<BigNumberish>,
    _stableToken: PromiseOrValue<string>,
    _minStableReceived: PromiseOrValue<BigNumberish>,
    _vault: PromiseOrValue<string>,
    _for: PromiseOrValue<string>,
    _swapTarget: PromiseOrValue<string>,
    _swapData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zaps(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    approvedTargets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAmountToSwap(
      _token: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setApprovedTargets(
      _tokens: PromiseOrValue<string>[],
      _targets: PromiseOrValue<string>[],
      _isApproved: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedStables(
      _stables: PromiseOrValue<string>[],
      _supported: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTempleRouter(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setZaps(
      _zaps: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedStables(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    temple(overrides?: CallOverrides): Promise<string>;

    templeRouter(overrides?: CallOverrides): Promise<string>;

    toggleContractActive(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    zapInTemple(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    zapInTempleFor(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    zapInTempleLP(
      _fromAddress: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _swapTarget: PromiseOrValue<string>,
      _params: TempleZaps.TempleLiquidityParamsStruct,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    zapInTempleLPFor(
      _fromAddress: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _for: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _params: TempleZaps.TempleLiquidityParamsStruct,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    zapInVault(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _vault: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    zapInVaultFor(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _vault: PromiseOrValue<string>,
      _for: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    zaps(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetContractState(bool)"(paused?: null): SetContractStateEventFilter;
    SetContractState(paused?: null): SetContractStateEventFilter;

    "SetTempleRouter(address)"(router?: null): SetTempleRouterEventFilter;
    SetTempleRouter(router?: null): SetTempleRouterEventFilter;

    "SetZaps(address)"(zaps?: null): SetZapsEventFilter;
    SetZaps(zaps?: null): SetZapsEventFilter;

    "TokenRecovered(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): TokenRecoveredEventFilter;
    TokenRecovered(
      token?: null,
      to?: null,
      amount?: null
    ): TokenRecoveredEventFilter;

    "ZappedInTempleLP(address,address,uint256,uint256,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      fromAddress?: null,
      fromAmount?: null,
      amountA?: null,
      amountB?: null
    ): ZappedInTempleLPEventFilter;
    ZappedInTempleLP(
      recipient?: PromiseOrValue<string> | null,
      fromAddress?: null,
      fromAmount?: null,
      amountA?: null,
      amountB?: null
    ): ZappedInTempleLPEventFilter;

    "ZappedTempleInVault(address,address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      fromToken?: null,
      fromAmount?: null,
      templeAmount?: null
    ): ZappedTempleInVaultEventFilter;
    ZappedTempleInVault(
      sender?: PromiseOrValue<string> | null,
      fromToken?: null,
      fromAmount?: null,
      templeAmount?: null
    ): ZappedTempleInVaultEventFilter;

    "ZappedTemplePlusFaithInVault(address,address,uint256,uint112,uint256)"(
      sender?: PromiseOrValue<string> | null,
      fromToken?: null,
      fromAmount?: null,
      faithAmount?: null,
      boostedAmount?: null
    ): ZappedTemplePlusFaithInVaultEventFilter;
    ZappedTemplePlusFaithInVault(
      sender?: PromiseOrValue<string> | null,
      fromToken?: null,
      fromAmount?: null,
      faithAmount?: null,
      boostedAmount?: null
    ): ZappedTemplePlusFaithInVaultEventFilter;
  };

  estimateGas: {
    approvedTargets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountToSwap(
      _token: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovedTargets(
      _tokens: PromiseOrValue<string>[],
      _targets: PromiseOrValue<string>[],
      _isApproved: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSupportedStables(
      _stables: PromiseOrValue<string>[],
      _supported: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTempleRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setZaps(
      _zaps: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedStables(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    temple(overrides?: CallOverrides): Promise<BigNumber>;

    templeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    toggleContractActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapInTemple(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapInTempleFor(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapInTempleLP(
      _fromAddress: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _swapTarget: PromiseOrValue<string>,
      _params: TempleZaps.TempleLiquidityParamsStruct,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapInTempleLPFor(
      _fromAddress: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _for: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _params: TempleZaps.TempleLiquidityParamsStruct,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapInVault(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _vault: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapInVaultFor(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _vault: PromiseOrValue<string>,
      _for: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zaps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approvedTargets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountToSwap(
      _token: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovedTargets(
      _tokens: PromiseOrValue<string>[],
      _targets: PromiseOrValue<string>[],
      _isApproved: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSupportedStables(
      _stables: PromiseOrValue<string>[],
      _supported: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTempleRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setZaps(
      _zaps: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedStables(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    temple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleContractActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapInTemple(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapInTempleFor(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapInTempleLP(
      _fromAddress: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _swapTarget: PromiseOrValue<string>,
      _params: TempleZaps.TempleLiquidityParamsStruct,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapInTempleLPFor(
      _fromAddress: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _for: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _params: TempleZaps.TempleLiquidityParamsStruct,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapInVault(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _vault: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapInVaultFor(
      _fromToken: PromiseOrValue<string>,
      _fromAmount: PromiseOrValue<BigNumberish>,
      _minTempleReceived: PromiseOrValue<BigNumberish>,
      _stableToken: PromiseOrValue<string>,
      _minStableReceived: PromiseOrValue<BigNumberish>,
      _vault: PromiseOrValue<string>,
      _for: PromiseOrValue<string>,
      _swapTarget: PromiseOrValue<string>,
      _swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zaps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
