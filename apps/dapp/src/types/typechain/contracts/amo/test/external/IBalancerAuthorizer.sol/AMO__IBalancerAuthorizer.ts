/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface AMO__IBalancerAuthorizerInterface extends utils.Interface {
  functions: {
    "canPerform(bytes32,address,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "grantRoles(bytes32[],address)": FunctionFragment;
    "grantRolesToMany(bytes32[],address[])": FunctionFragment;
    "revokeRoles(bytes32[],address)": FunctionFragment;
    "revokeRolesFromMany(bytes32[],address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canPerform"
      | "grantRole"
      | "grantRoles"
      | "grantRolesToMany"
      | "revokeRoles"
      | "revokeRolesFromMany"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canPerform",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRolesToMany",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRolesFromMany",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantRolesToMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRolesFromMany",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AMO__IBalancerAuthorizer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AMO__IBalancerAuthorizerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canPerform(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRolesToMany(
      roles: PromiseOrValue<BytesLike>[],
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRolesFromMany(
      roles: PromiseOrValue<BytesLike>[],
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canPerform(
    actionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: PromiseOrValue<BytesLike>[],
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRolesToMany(
    roles: PromiseOrValue<BytesLike>[],
    accounts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRoles(
    roles: PromiseOrValue<BytesLike>[],
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRolesFromMany(
    roles: PromiseOrValue<BytesLike>[],
    accounts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canPerform(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRolesToMany(
      roles: PromiseOrValue<BytesLike>[],
      accounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRolesFromMany(
      roles: PromiseOrValue<BytesLike>[],
      accounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    canPerform(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRolesToMany(
      roles: PromiseOrValue<BytesLike>[],
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRolesFromMany(
      roles: PromiseOrValue<BytesLike>[],
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canPerform(
      actionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRolesToMany(
      roles: PromiseOrValue<BytesLike>[],
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRolesFromMany(
      roles: PromiseOrValue<BytesLike>[],
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
