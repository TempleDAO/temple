/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace AMO__IBalancerVault {
  export type JoinPoolRequestStruct = {
    assets: PromiseOrValue<string>[];
    maxAmountsIn: PromiseOrValue<BigNumberish>[];
    userData: PromiseOrValue<BytesLike>;
    fromInternalBalance: PromiseOrValue<boolean>;
  };

  export type JoinPoolRequestStructOutput = [
    string[],
    BigNumber[],
    string,
    boolean
  ] & {
    assets: string[];
    maxAmountsIn: BigNumber[];
    userData: string;
    fromInternalBalance: boolean;
  };

  export type ExitPoolRequestStruct = {
    assets: PromiseOrValue<string>[];
    minAmountsOut: PromiseOrValue<BigNumberish>[];
    userData: PromiseOrValue<BytesLike>;
    toInternalBalance: PromiseOrValue<boolean>;
  };

  export type ExitPoolRequestStructOutput = [
    string[],
    BigNumber[],
    string,
    boolean
  ] & {
    assets: string[];
    minAmountsOut: BigNumber[];
    userData: string;
    toInternalBalance: boolean;
  };
}

export interface RAMOSInterface extends utils.Interface {
  functions: {
    "BPS_PRECISION()": FunctionFragment;
    "addLiquidity((address[],uint256[],bytes,bool),uint256)": FunctionFragment;
    "amoStaking()": FunctionFragment;
    "balancerPoolId()": FunctionFragment;
    "balancerVault()": FunctionFragment;
    "booster()": FunctionFragment;
    "bptToken()": FunctionFragment;
    "cooldownSecs()": FunctionFragment;
    "depositAndStakeBptTokens(uint256,bool)": FunctionFragment;
    "depositStable(uint256,uint256)": FunctionFragment;
    "lastRebalanceTimeSecs()": FunctionFragment;
    "maxRebalanceAmounts()": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "poolHelper()": FunctionFragment;
    "postRebalanceSlippage()": FunctionFragment;
    "rebalanceDown(uint256,uint256)": FunctionFragment;
    "rebalancePercentageBoundLow()": FunctionFragment;
    "rebalancePercentageBoundUp()": FunctionFragment;
    "rebalanceUp(uint256,uint256)": FunctionFragment;
    "recoverToken(address,address,uint256)": FunctionFragment;
    "removeLiquidity((address[],uint256[],bytes,bool),uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAmoStaking(address)": FunctionFragment;
    "setCoolDown(uint64)": FunctionFragment;
    "setMaxRebalanceAmounts(uint256,uint256,uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPoolHelper(address)": FunctionFragment;
    "setPostRebalanceSlippage(uint64)": FunctionFragment;
    "setRebalancePercentageBounds(uint64,uint64)": FunctionFragment;
    "setTemplePriceFloorNumerator(uint128)": FunctionFragment;
    "stable()": FunctionFragment;
    "temple()": FunctionFragment;
    "templeBalancerPoolIndex()": FunctionFragment;
    "templePriceFloorNumerator()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawStable(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BPS_PRECISION"
      | "addLiquidity"
      | "amoStaking"
      | "balancerPoolId"
      | "balancerVault"
      | "booster"
      | "bptToken"
      | "cooldownSecs"
      | "depositAndStakeBptTokens"
      | "depositStable"
      | "lastRebalanceTimeSecs"
      | "maxRebalanceAmounts"
      | "operator"
      | "owner"
      | "pause"
      | "paused"
      | "poolHelper"
      | "postRebalanceSlippage"
      | "rebalanceDown"
      | "rebalancePercentageBoundLow"
      | "rebalancePercentageBoundUp"
      | "rebalanceUp"
      | "recoverToken"
      | "removeLiquidity"
      | "renounceOwnership"
      | "setAmoStaking"
      | "setCoolDown"
      | "setMaxRebalanceAmounts"
      | "setOperator"
      | "setPoolHelper"
      | "setPostRebalanceSlippage"
      | "setRebalancePercentageBounds"
      | "setTemplePriceFloorNumerator"
      | "stable"
      | "temple"
      | "templeBalancerPoolIndex"
      | "templePriceFloorNumerator"
      | "transferOwnership"
      | "unpause"
      | "withdrawStable"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BPS_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      AMO__IBalancerVault.JoinPoolRequestStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "amoStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "booster", values?: undefined): string;
  encodeFunctionData(functionFragment: "bptToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cooldownSecs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndStakeBptTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRebalanceTimeSecs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRebalanceAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postRebalanceSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceDown",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalancePercentageBoundLow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalancePercentageBoundUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceUp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      AMO__IBalancerVault.ExitPoolRequestStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAmoStaking",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoolDown",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRebalanceAmounts",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolHelper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPostRebalanceSlippage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalancePercentageBounds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTemplePriceFloorNumerator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;
  encodeFunctionData(functionFragment: "temple", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "templeBalancerPoolIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templePriceFloorNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawStable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "amoStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balancerPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "booster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bptToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cooldownSecs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndStakeBptTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRebalanceTimeSecs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRebalanceAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolHelper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRebalanceSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalancePercentageBoundLow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalancePercentageBoundUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmoStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRebalanceAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPostRebalanceSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalancePercentageBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTemplePriceFloorNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "temple", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "templeBalancerPoolIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templePriceFloorNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStable",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RebalanceDown(uint256,uint256)": EventFragment;
    "RebalanceUp(uint256,uint256)": EventFragment;
    "RecoveredToken(address,address,uint256)": EventFragment;
    "SetAmoStaking(address)": EventFragment;
    "SetCooldown(uint64)": EventFragment;
    "SetMaxRebalanceAmounts(uint256,uint256,uint256)": EventFragment;
    "SetOperator(address)": EventFragment;
    "SetPauseState(bool)": EventFragment;
    "SetPoolHelper(address)": EventFragment;
    "SetPostRebalanceSlippage(uint64)": EventFragment;
    "SetRebalancePercentageBounds(uint64,uint64)": EventFragment;
    "SetTemplePriceFloorNumerator(uint128)": EventFragment;
    "StableDeposited(uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawStable(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveredToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAmoStaking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCooldown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxRebalanceAmounts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPauseState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolHelper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPostRebalanceSlippage"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetRebalancePercentageBounds"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetTemplePriceFloorNumerator"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStable"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RebalanceDownEventObject {
  templeAmountIn: BigNumber;
  bptIn: BigNumber;
}
export type RebalanceDownEvent = TypedEvent<
  [BigNumber, BigNumber],
  RebalanceDownEventObject
>;

export type RebalanceDownEventFilter = TypedEventFilter<RebalanceDownEvent>;

export interface RebalanceUpEventObject {
  bptAmountIn: BigNumber;
  templeAmountOut: BigNumber;
}
export type RebalanceUpEvent = TypedEvent<
  [BigNumber, BigNumber],
  RebalanceUpEventObject
>;

export type RebalanceUpEventFilter = TypedEventFilter<RebalanceUpEvent>;

export interface RecoveredTokenEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type RecoveredTokenEvent = TypedEvent<
  [string, string, BigNumber],
  RecoveredTokenEventObject
>;

export type RecoveredTokenEventFilter = TypedEventFilter<RecoveredTokenEvent>;

export interface SetAmoStakingEventObject {
  amoStaking: string;
}
export type SetAmoStakingEvent = TypedEvent<[string], SetAmoStakingEventObject>;

export type SetAmoStakingEventFilter = TypedEventFilter<SetAmoStakingEvent>;

export interface SetCooldownEventObject {
  cooldownSecs: BigNumber;
}
export type SetCooldownEvent = TypedEvent<[BigNumber], SetCooldownEventObject>;

export type SetCooldownEventFilter = TypedEventFilter<SetCooldownEvent>;

export interface SetMaxRebalanceAmountsEventObject {
  bptMaxAmount: BigNumber;
  stableMaxAmount: BigNumber;
  templeMaxAmount: BigNumber;
}
export type SetMaxRebalanceAmountsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SetMaxRebalanceAmountsEventObject
>;

export type SetMaxRebalanceAmountsEventFilter =
  TypedEventFilter<SetMaxRebalanceAmountsEvent>;

export interface SetOperatorEventObject {
  operator: string;
}
export type SetOperatorEvent = TypedEvent<[string], SetOperatorEventObject>;

export type SetOperatorEventFilter = TypedEventFilter<SetOperatorEvent>;

export interface SetPauseStateEventObject {
  paused: boolean;
}
export type SetPauseStateEvent = TypedEvent<
  [boolean],
  SetPauseStateEventObject
>;

export type SetPauseStateEventFilter = TypedEventFilter<SetPauseStateEvent>;

export interface SetPoolHelperEventObject {
  poolHelper: string;
}
export type SetPoolHelperEvent = TypedEvent<[string], SetPoolHelperEventObject>;

export type SetPoolHelperEventFilter = TypedEventFilter<SetPoolHelperEvent>;

export interface SetPostRebalanceSlippageEventObject {
  slippageBps: BigNumber;
}
export type SetPostRebalanceSlippageEvent = TypedEvent<
  [BigNumber],
  SetPostRebalanceSlippageEventObject
>;

export type SetPostRebalanceSlippageEventFilter =
  TypedEventFilter<SetPostRebalanceSlippageEvent>;

export interface SetRebalancePercentageBoundsEventObject {
  belowTpf: BigNumber;
  aboveTpf: BigNumber;
}
export type SetRebalancePercentageBoundsEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetRebalancePercentageBoundsEventObject
>;

export type SetRebalancePercentageBoundsEventFilter =
  TypedEventFilter<SetRebalancePercentageBoundsEvent>;

export interface SetTemplePriceFloorNumeratorEventObject {
  numerator: BigNumber;
}
export type SetTemplePriceFloorNumeratorEvent = TypedEvent<
  [BigNumber],
  SetTemplePriceFloorNumeratorEventObject
>;

export type SetTemplePriceFloorNumeratorEventFilter =
  TypedEventFilter<SetTemplePriceFloorNumeratorEvent>;

export interface StableDepositedEventObject {
  amountIn: BigNumber;
  bptOut: BigNumber;
}
export type StableDepositedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StableDepositedEventObject
>;

export type StableDepositedEventFilter = TypedEventFilter<StableDepositedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawStableEventObject {
  bptAmountIn: BigNumber;
  amountOut: BigNumber;
}
export type WithdrawStableEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrawStableEventObject
>;

export type WithdrawStableEventFilter = TypedEventFilter<WithdrawStableEvent>;

export interface RAMOS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RAMOSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BPS_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidity(
      request: AMO__IBalancerVault.JoinPoolRequestStruct,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    amoStaking(overrides?: CallOverrides): Promise<[string]>;

    balancerPoolId(overrides?: CallOverrides): Promise<[string]>;

    balancerVault(overrides?: CallOverrides): Promise<[string]>;

    booster(overrides?: CallOverrides): Promise<[string]>;

    bptToken(overrides?: CallOverrides): Promise<[string]>;

    cooldownSecs(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositAndStakeBptTokens(
      amount: PromiseOrValue<BigNumberish>,
      useContractBalance: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositStable(
      amountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastRebalanceTimeSecs(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRebalanceAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        bpt: BigNumber;
        stable: BigNumber;
        temple: BigNumber;
      }
    >;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    poolHelper(overrides?: CallOverrides): Promise<[string]>;

    postRebalanceSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebalanceDown(
      templeAmountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebalancePercentageBoundLow(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rebalancePercentageBoundUp(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebalanceUp(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      request: AMO__IBalancerVault.ExitPoolRequestStruct,
      bptIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAmoStaking(
      _amoStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCoolDown(
      _seconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxRebalanceAmounts(
      bptMaxAmount: PromiseOrValue<BigNumberish>,
      stableMaxAmount: PromiseOrValue<BigNumberish>,
      templeMaxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolHelper(
      _poolHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPostRebalanceSlippage(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRebalancePercentageBounds(
      belowTPF: PromiseOrValue<BigNumberish>,
      aboveTPF: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTemplePriceFloorNumerator(
      _numerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stable(overrides?: CallOverrides): Promise<[string]>;

    temple(overrides?: CallOverrides): Promise<[string]>;

    templeBalancerPoolIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    templePriceFloorNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawStable(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BPS_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidity(
    request: AMO__IBalancerVault.JoinPoolRequestStruct,
    minBptOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  amoStaking(overrides?: CallOverrides): Promise<string>;

  balancerPoolId(overrides?: CallOverrides): Promise<string>;

  balancerVault(overrides?: CallOverrides): Promise<string>;

  booster(overrides?: CallOverrides): Promise<string>;

  bptToken(overrides?: CallOverrides): Promise<string>;

  cooldownSecs(overrides?: CallOverrides): Promise<BigNumber>;

  depositAndStakeBptTokens(
    amount: PromiseOrValue<BigNumberish>,
    useContractBalance: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositStable(
    amountIn: PromiseOrValue<BigNumberish>,
    minBptOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastRebalanceTimeSecs(overrides?: CallOverrides): Promise<BigNumber>;

  maxRebalanceAmounts(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      bpt: BigNumber;
      stable: BigNumber;
      temple: BigNumber;
    }
  >;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  poolHelper(overrides?: CallOverrides): Promise<string>;

  postRebalanceSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  rebalanceDown(
    templeAmountIn: PromiseOrValue<BigNumberish>,
    minBptOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebalancePercentageBoundLow(overrides?: CallOverrides): Promise<BigNumber>;

  rebalancePercentageBoundUp(overrides?: CallOverrides): Promise<BigNumber>;

  rebalanceUp(
    bptAmountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverToken(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    request: AMO__IBalancerVault.ExitPoolRequestStruct,
    bptIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAmoStaking(
    _amoStaking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCoolDown(
    _seconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxRebalanceAmounts(
    bptMaxAmount: PromiseOrValue<BigNumberish>,
    stableMaxAmount: PromiseOrValue<BigNumberish>,
    templeMaxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolHelper(
    _poolHelper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPostRebalanceSlippage(
    slippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRebalancePercentageBounds(
    belowTPF: PromiseOrValue<BigNumberish>,
    aboveTPF: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTemplePriceFloorNumerator(
    _numerator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stable(overrides?: CallOverrides): Promise<string>;

  temple(overrides?: CallOverrides): Promise<string>;

  templeBalancerPoolIndex(overrides?: CallOverrides): Promise<BigNumber>;

  templePriceFloorNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawStable(
    bptAmountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      request: AMO__IBalancerVault.JoinPoolRequestStruct,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    amoStaking(overrides?: CallOverrides): Promise<string>;

    balancerPoolId(overrides?: CallOverrides): Promise<string>;

    balancerVault(overrides?: CallOverrides): Promise<string>;

    booster(overrides?: CallOverrides): Promise<string>;

    bptToken(overrides?: CallOverrides): Promise<string>;

    cooldownSecs(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndStakeBptTokens(
      amount: PromiseOrValue<BigNumberish>,
      useContractBalance: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositStable(
      amountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastRebalanceTimeSecs(overrides?: CallOverrides): Promise<BigNumber>;

    maxRebalanceAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        bpt: BigNumber;
        stable: BigNumber;
        temple: BigNumber;
      }
    >;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    poolHelper(overrides?: CallOverrides): Promise<string>;

    postRebalanceSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceDown(
      templeAmountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rebalancePercentageBoundLow(overrides?: CallOverrides): Promise<BigNumber>;

    rebalancePercentageBoundUp(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceUp(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      request: AMO__IBalancerVault.ExitPoolRequestStruct,
      bptIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAmoStaking(
      _amoStaking: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCoolDown(
      _seconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRebalanceAmounts(
      bptMaxAmount: PromiseOrValue<BigNumberish>,
      stableMaxAmount: PromiseOrValue<BigNumberish>,
      templeMaxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolHelper(
      _poolHelper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPostRebalanceSlippage(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalancePercentageBounds(
      belowTPF: PromiseOrValue<BigNumberish>,
      aboveTPF: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTemplePriceFloorNumerator(
      _numerator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stable(overrides?: CallOverrides): Promise<string>;

    temple(overrides?: CallOverrides): Promise<string>;

    templeBalancerPoolIndex(overrides?: CallOverrides): Promise<BigNumber>;

    templePriceFloorNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawStable(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RebalanceDown(uint256,uint256)"(
      templeAmountIn?: null,
      bptIn?: null
    ): RebalanceDownEventFilter;
    RebalanceDown(
      templeAmountIn?: null,
      bptIn?: null
    ): RebalanceDownEventFilter;

    "RebalanceUp(uint256,uint256)"(
      bptAmountIn?: null,
      templeAmountOut?: null
    ): RebalanceUpEventFilter;
    RebalanceUp(
      bptAmountIn?: null,
      templeAmountOut?: null
    ): RebalanceUpEventFilter;

    "RecoveredToken(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): RecoveredTokenEventFilter;
    RecoveredToken(
      token?: null,
      to?: null,
      amount?: null
    ): RecoveredTokenEventFilter;

    "SetAmoStaking(address)"(
      amoStaking?: PromiseOrValue<string> | null
    ): SetAmoStakingEventFilter;
    SetAmoStaking(
      amoStaking?: PromiseOrValue<string> | null
    ): SetAmoStakingEventFilter;

    "SetCooldown(uint64)"(cooldownSecs?: null): SetCooldownEventFilter;
    SetCooldown(cooldownSecs?: null): SetCooldownEventFilter;

    "SetMaxRebalanceAmounts(uint256,uint256,uint256)"(
      bptMaxAmount?: null,
      stableMaxAmount?: null,
      templeMaxAmount?: null
    ): SetMaxRebalanceAmountsEventFilter;
    SetMaxRebalanceAmounts(
      bptMaxAmount?: null,
      stableMaxAmount?: null,
      templeMaxAmount?: null
    ): SetMaxRebalanceAmountsEventFilter;

    "SetOperator(address)"(operator?: null): SetOperatorEventFilter;
    SetOperator(operator?: null): SetOperatorEventFilter;

    "SetPauseState(bool)"(paused?: null): SetPauseStateEventFilter;
    SetPauseState(paused?: null): SetPauseStateEventFilter;

    "SetPoolHelper(address)"(poolHelper?: null): SetPoolHelperEventFilter;
    SetPoolHelper(poolHelper?: null): SetPoolHelperEventFilter;

    "SetPostRebalanceSlippage(uint64)"(
      slippageBps?: null
    ): SetPostRebalanceSlippageEventFilter;
    SetPostRebalanceSlippage(
      slippageBps?: null
    ): SetPostRebalanceSlippageEventFilter;

    "SetRebalancePercentageBounds(uint64,uint64)"(
      belowTpf?: null,
      aboveTpf?: null
    ): SetRebalancePercentageBoundsEventFilter;
    SetRebalancePercentageBounds(
      belowTpf?: null,
      aboveTpf?: null
    ): SetRebalancePercentageBoundsEventFilter;

    "SetTemplePriceFloorNumerator(uint128)"(
      numerator?: null
    ): SetTemplePriceFloorNumeratorEventFilter;
    SetTemplePriceFloorNumerator(
      numerator?: null
    ): SetTemplePriceFloorNumeratorEventFilter;

    "StableDeposited(uint256,uint256)"(
      amountIn?: null,
      bptOut?: null
    ): StableDepositedEventFilter;
    StableDeposited(amountIn?: null, bptOut?: null): StableDepositedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawStable(uint256,uint256)"(
      bptAmountIn?: null,
      amountOut?: null
    ): WithdrawStableEventFilter;
    WithdrawStable(
      bptAmountIn?: null,
      amountOut?: null
    ): WithdrawStableEventFilter;
  };

  estimateGas: {
    BPS_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      request: AMO__IBalancerVault.JoinPoolRequestStruct,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    amoStaking(overrides?: CallOverrides): Promise<BigNumber>;

    balancerPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    balancerVault(overrides?: CallOverrides): Promise<BigNumber>;

    booster(overrides?: CallOverrides): Promise<BigNumber>;

    bptToken(overrides?: CallOverrides): Promise<BigNumber>;

    cooldownSecs(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndStakeBptTokens(
      amount: PromiseOrValue<BigNumberish>,
      useContractBalance: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositStable(
      amountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastRebalanceTimeSecs(overrides?: CallOverrides): Promise<BigNumber>;

    maxRebalanceAmounts(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    poolHelper(overrides?: CallOverrides): Promise<BigNumber>;

    postRebalanceSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceDown(
      templeAmountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebalancePercentageBoundLow(overrides?: CallOverrides): Promise<BigNumber>;

    rebalancePercentageBoundUp(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceUp(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      request: AMO__IBalancerVault.ExitPoolRequestStruct,
      bptIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAmoStaking(
      _amoStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCoolDown(
      _seconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxRebalanceAmounts(
      bptMaxAmount: PromiseOrValue<BigNumberish>,
      stableMaxAmount: PromiseOrValue<BigNumberish>,
      templeMaxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolHelper(
      _poolHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPostRebalanceSlippage(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRebalancePercentageBounds(
      belowTPF: PromiseOrValue<BigNumberish>,
      aboveTPF: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTemplePriceFloorNumerator(
      _numerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    temple(overrides?: CallOverrides): Promise<BigNumber>;

    templeBalancerPoolIndex(overrides?: CallOverrides): Promise<BigNumber>;

    templePriceFloorNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawStable(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      request: AMO__IBalancerVault.JoinPoolRequestStruct,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    amoStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balancerPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balancerVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    booster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bptToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cooldownSecs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositAndStakeBptTokens(
      amount: PromiseOrValue<BigNumberish>,
      useContractBalance: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositStable(
      amountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastRebalanceTimeSecs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRebalanceAmounts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postRebalanceSlippage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceDown(
      templeAmountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebalancePercentageBoundLow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalancePercentageBoundUp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceUp(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      request: AMO__IBalancerVault.ExitPoolRequestStruct,
      bptIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAmoStaking(
      _amoStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCoolDown(
      _seconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRebalanceAmounts(
      bptMaxAmount: PromiseOrValue<BigNumberish>,
      stableMaxAmount: PromiseOrValue<BigNumberish>,
      templeMaxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolHelper(
      _poolHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPostRebalanceSlippage(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRebalancePercentageBounds(
      belowTPF: PromiseOrValue<BigNumberish>,
      aboveTPF: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTemplePriceFloorNumerator(
      _numerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    temple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templeBalancerPoolIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    templePriceFloorNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStable(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
