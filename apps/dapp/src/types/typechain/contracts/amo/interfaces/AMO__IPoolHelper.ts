/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace AMO__IBalancerVault {
  export type ExitPoolRequestStruct = {
    assets: PromiseOrValue<string>[];
    minAmountsOut: PromiseOrValue<BigNumberish>[];
    userData: PromiseOrValue<BytesLike>;
    toInternalBalance: PromiseOrValue<boolean>;
  };

  export type ExitPoolRequestStructOutput = [
    string[],
    BigNumber[],
    string,
    boolean
  ] & {
    assets: string[];
    minAmountsOut: BigNumber[];
    userData: string;
    toInternalBalance: boolean;
  };

  export type JoinPoolRequestStruct = {
    assets: PromiseOrValue<string>[];
    maxAmountsIn: PromiseOrValue<BigNumberish>[];
    userData: PromiseOrValue<BytesLike>;
    fromInternalBalance: PromiseOrValue<boolean>;
  };

  export type JoinPoolRequestStructOutput = [
    string[],
    BigNumber[],
    string,
    boolean
  ] & {
    assets: string[];
    maxAmountsIn: BigNumber[];
    userData: string;
    fromInternalBalance: boolean;
  };
}

export interface AMO__IPoolHelperInterface extends utils.Interface {
  functions: {
    "balancerPoolId()": FunctionFragment;
    "balancerVault()": FunctionFragment;
    "createPoolExitRequest(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createPoolJoinRequest(address,address,uint256,uint256,uint256)": FunctionFragment;
    "exitPool(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "getBalances()": FunctionFragment;
    "getMax(uint256,uint256)": FunctionFragment;
    "getSlippage(uint256)": FunctionFragment;
    "getSpotPriceScaled()": FunctionFragment;
    "isSpotPriceAboveTPF(uint256)": FunctionFragment;
    "isSpotPriceAboveTPF()": FunctionFragment;
    "isSpotPriceAboveTPFUpperBound()": FunctionFragment;
    "isSpotPriceBelowTPF(uint256)": FunctionFragment;
    "isSpotPriceBelowTPF()": FunctionFragment;
    "isSpotPriceBelowTPFLowerBound()": FunctionFragment;
    "joinPool(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "spotPriceUsingLPRatio()": FunctionFragment;
    "templeBalancerPoolIndex()": FunctionFragment;
    "willExitTakePriceAboveTPFUpperBound(uint256)": FunctionFragment;
    "willJoinTakePriceBelowTPFLowerBound(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balancerPoolId"
      | "balancerVault"
      | "createPoolExitRequest"
      | "createPoolJoinRequest"
      | "exitPool"
      | "getBalances"
      | "getMax"
      | "getSlippage"
      | "getSpotPriceScaled"
      | "isSpotPriceAboveTPF(uint256)"
      | "isSpotPriceAboveTPF()"
      | "isSpotPriceAboveTPFUpperBound"
      | "isSpotPriceBelowTPF(uint256)"
      | "isSpotPriceBelowTPF()"
      | "isSpotPriceBelowTPFLowerBound"
      | "joinPool"
      | "spotPriceUsingLPRatio"
      | "templeBalancerPoolIndex"
      | "willExitTakePriceAboveTPFUpperBound"
      | "willJoinTakePriceBelowTPFLowerBound"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balancerPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balancerVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPoolExitRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPoolJoinRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMax",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlippage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPriceScaled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSpotPriceAboveTPF(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSpotPriceAboveTPF()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSpotPriceAboveTPFUpperBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSpotPriceBelowTPF(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSpotPriceBelowTPF()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSpotPriceBelowTPFLowerBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "spotPriceUsingLPRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templeBalancerPoolIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "willExitTakePriceAboveTPFUpperBound",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "willJoinTakePriceBelowTPFLowerBound",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "balancerPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPoolExitRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPoolJoinRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPriceScaled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpotPriceAboveTPF(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpotPriceAboveTPF()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpotPriceAboveTPFUpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpotPriceBelowTPF(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpotPriceBelowTPF()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpotPriceBelowTPFLowerBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spotPriceUsingLPRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeBalancerPoolIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "willExitTakePriceAboveTPFUpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "willJoinTakePriceBelowTPFLowerBound",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AMO__IPoolHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AMO__IPoolHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balancerPoolId(overrides?: CallOverrides): Promise<[string]>;

    balancerVault(overrides?: CallOverrides): Promise<[string]>;

    createPoolExitRequest(
      temple: PromiseOrValue<string>,
      stable: PromiseOrValue<string>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      exitTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [AMO__IBalancerVault.ExitPoolRequestStructOutput] & {
        request: AMO__IBalancerVault.ExitPoolRequestStructOutput;
      }
    >;

    createPoolJoinRequest(
      temple: PromiseOrValue<string>,
      stable: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      minTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [AMO__IBalancerVault.JoinPoolRequestStructOutput] & {
        request: AMO__IBalancerVault.JoinPoolRequestStructOutput;
      }
    >;

    exitPool(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
      postRebalanceSlippage: PromiseOrValue<BigNumberish>,
      exitTokenIndex: PromiseOrValue<BigNumberish>,
      templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
      exitPoolToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalances(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances: BigNumber[] }>;

    getMax(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxValue: BigNumber }>;

    getSlippage(
      spotPriceBeforeScaled: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSpotPriceScaled(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spotPriceScaled: BigNumber }>;

    "isSpotPriceAboveTPF(uint256)"(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSpotPriceAboveTPF()"(overrides?: CallOverrides): Promise<[boolean]>;

    isSpotPriceAboveTPFUpperBound(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSpotPriceBelowTPF(uint256)"(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSpotPriceBelowTPF()"(overrides?: CallOverrides): Promise<[boolean]>;

    isSpotPriceBelowTPFLowerBound(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinPool(
      amountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
      templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
      postRebalanceSlippage: PromiseOrValue<BigNumberish>,
      joinTokenIndex: PromiseOrValue<BigNumberish>,
      joinPoolToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spotPriceUsingLPRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        templeBalance: BigNumber;
        stableBalance: BigNumber;
      }
    >;

    templeBalancerPoolIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    willExitTakePriceAboveTPFUpperBound(
      tokensOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    willJoinTakePriceBelowTPFLowerBound(
      tokensIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  balancerPoolId(overrides?: CallOverrides): Promise<string>;

  balancerVault(overrides?: CallOverrides): Promise<string>;

  createPoolExitRequest(
    temple: PromiseOrValue<string>,
    stable: PromiseOrValue<string>,
    bptAmountIn: PromiseOrValue<BigNumberish>,
    tokenIndex: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    exitTokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AMO__IBalancerVault.ExitPoolRequestStructOutput>;

  createPoolJoinRequest(
    temple: PromiseOrValue<string>,
    stable: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    tokenIndex: PromiseOrValue<BigNumberish>,
    minTokenOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AMO__IBalancerVault.JoinPoolRequestStructOutput>;

  exitPool(
    bptAmountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
    rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
    postRebalanceSlippage: PromiseOrValue<BigNumberish>,
    exitTokenIndex: PromiseOrValue<BigNumberish>,
    templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
    exitPoolToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

  getMax(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSlippage(
    spotPriceBeforeScaled: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpotPriceScaled(overrides?: CallOverrides): Promise<BigNumber>;

  "isSpotPriceAboveTPF(uint256)"(
    slippage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSpotPriceAboveTPF()"(overrides?: CallOverrides): Promise<boolean>;

  isSpotPriceAboveTPFUpperBound(overrides?: CallOverrides): Promise<boolean>;

  "isSpotPriceBelowTPF(uint256)"(
    slippage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSpotPriceBelowTPF()"(overrides?: CallOverrides): Promise<boolean>;

  isSpotPriceBelowTPFLowerBound(overrides?: CallOverrides): Promise<boolean>;

  joinPool(
    amountIn: PromiseOrValue<BigNumberish>,
    minBptOut: PromiseOrValue<BigNumberish>,
    rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
    rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
    templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
    postRebalanceSlippage: PromiseOrValue<BigNumberish>,
    joinTokenIndex: PromiseOrValue<BigNumberish>,
    joinPoolToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spotPriceUsingLPRatio(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      templeBalance: BigNumber;
      stableBalance: BigNumber;
    }
  >;

  templeBalancerPoolIndex(overrides?: CallOverrides): Promise<BigNumber>;

  willExitTakePriceAboveTPFUpperBound(
    tokensOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  willJoinTakePriceBelowTPFLowerBound(
    tokensIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    balancerPoolId(overrides?: CallOverrides): Promise<string>;

    balancerVault(overrides?: CallOverrides): Promise<string>;

    createPoolExitRequest(
      temple: PromiseOrValue<string>,
      stable: PromiseOrValue<string>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      exitTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AMO__IBalancerVault.ExitPoolRequestStructOutput>;

    createPoolJoinRequest(
      temple: PromiseOrValue<string>,
      stable: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      minTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AMO__IBalancerVault.JoinPoolRequestStructOutput>;

    exitPool(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
      postRebalanceSlippage: PromiseOrValue<BigNumberish>,
      exitTokenIndex: PromiseOrValue<BigNumberish>,
      templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
      exitPoolToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

    getMax(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlippage(
      spotPriceBeforeScaled: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPriceScaled(overrides?: CallOverrides): Promise<BigNumber>;

    "isSpotPriceAboveTPF(uint256)"(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSpotPriceAboveTPF()"(overrides?: CallOverrides): Promise<boolean>;

    isSpotPriceAboveTPFUpperBound(overrides?: CallOverrides): Promise<boolean>;

    "isSpotPriceBelowTPF(uint256)"(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSpotPriceBelowTPF()"(overrides?: CallOverrides): Promise<boolean>;

    isSpotPriceBelowTPFLowerBound(overrides?: CallOverrides): Promise<boolean>;

    joinPool(
      amountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
      templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
      postRebalanceSlippage: PromiseOrValue<BigNumberish>,
      joinTokenIndex: PromiseOrValue<BigNumberish>,
      joinPoolToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spotPriceUsingLPRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        templeBalance: BigNumber;
        stableBalance: BigNumber;
      }
    >;

    templeBalancerPoolIndex(overrides?: CallOverrides): Promise<BigNumber>;

    willExitTakePriceAboveTPFUpperBound(
      tokensOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    willJoinTakePriceBelowTPFLowerBound(
      tokensIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    balancerPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    balancerVault(overrides?: CallOverrides): Promise<BigNumber>;

    createPoolExitRequest(
      temple: PromiseOrValue<string>,
      stable: PromiseOrValue<string>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      exitTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPoolJoinRequest(
      temple: PromiseOrValue<string>,
      stable: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      minTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitPool(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
      postRebalanceSlippage: PromiseOrValue<BigNumberish>,
      exitTokenIndex: PromiseOrValue<BigNumberish>,
      templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
      exitPoolToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalances(overrides?: CallOverrides): Promise<BigNumber>;

    getMax(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlippage(
      spotPriceBeforeScaled: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPriceScaled(overrides?: CallOverrides): Promise<BigNumber>;

    "isSpotPriceAboveTPF(uint256)"(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSpotPriceAboveTPF()"(overrides?: CallOverrides): Promise<BigNumber>;

    isSpotPriceAboveTPFUpperBound(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSpotPriceBelowTPF(uint256)"(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSpotPriceBelowTPF()"(overrides?: CallOverrides): Promise<BigNumber>;

    isSpotPriceBelowTPFLowerBound(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinPool(
      amountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
      templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
      postRebalanceSlippage: PromiseOrValue<BigNumberish>,
      joinTokenIndex: PromiseOrValue<BigNumberish>,
      joinPoolToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spotPriceUsingLPRatio(overrides?: CallOverrides): Promise<BigNumber>;

    templeBalancerPoolIndex(overrides?: CallOverrides): Promise<BigNumber>;

    willExitTakePriceAboveTPFUpperBound(
      tokensOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    willJoinTakePriceBelowTPFLowerBound(
      tokensIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balancerPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balancerVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPoolExitRequest(
      temple: PromiseOrValue<string>,
      stable: PromiseOrValue<string>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      exitTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPoolJoinRequest(
      temple: PromiseOrValue<string>,
      stable: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      minTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitPool(
      bptAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
      postRebalanceSlippage: PromiseOrValue<BigNumberish>,
      exitTokenIndex: PromiseOrValue<BigNumberish>,
      templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
      exitPoolToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMax(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSlippage(
      spotPriceBeforeScaled: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPriceScaled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSpotPriceAboveTPF(uint256)"(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSpotPriceAboveTPF()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSpotPriceAboveTPFUpperBound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSpotPriceBelowTPF(uint256)"(
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSpotPriceBelowTPF()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSpotPriceBelowTPFLowerBound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinPool(
      amountIn: PromiseOrValue<BigNumberish>,
      minBptOut: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundUp: PromiseOrValue<BigNumberish>,
      rebalancePercentageBoundLow: PromiseOrValue<BigNumberish>,
      templePriceFloorNumerator: PromiseOrValue<BigNumberish>,
      postRebalanceSlippage: PromiseOrValue<BigNumberish>,
      joinTokenIndex: PromiseOrValue<BigNumberish>,
      joinPoolToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spotPriceUsingLPRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    templeBalancerPoolIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    willExitTakePriceAboveTPFUpperBound(
      tokensOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    willJoinTakePriceBelowTPFLowerBound(
      tokensIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
