/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace AuraStaking {
  export type PositionStruct = {
    staked: PromiseOrValue<BigNumberish>;
    earned: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [BigNumber, BigNumber] & {
    staked: BigNumber;
    earned: BigNumber;
  };
}

export interface AuraStakingInterface extends utils.Interface {
  functions: {
    "auraPoolInfo()": FunctionFragment;
    "booster()": FunctionFragment;
    "bptToken()": FunctionFragment;
    "depositAndStake(uint256)": FunctionFragment;
    "earned()": FunctionFragment;
    "getReward(bool)": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverToken(address,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewardsRecipient()": FunctionFragment;
    "setAuraPoolInfo(uint32,address,address)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setRewardsRecipient(address)": FunctionFragment;
    "showPositions()": FunctionFragment;
    "stakedBalance()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawAllAndUnwrap(bool,bool)": FunctionFragment;
    "withdrawAndUnwrap(uint256,bool,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auraPoolInfo"
      | "booster"
      | "bptToken"
      | "depositAndStake"
      | "earned"
      | "getReward"
      | "operator"
      | "owner"
      | "recoverToken"
      | "renounceOwnership"
      | "rewardTokens"
      | "rewardsRecipient"
      | "setAuraPoolInfo"
      | "setOperator"
      | "setRewardsRecipient"
      | "showPositions"
      | "stakedBalance"
      | "transferOwnership"
      | "withdrawAllAndUnwrap"
      | "withdrawAndUnwrap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auraPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "booster", values?: undefined): string;
  encodeFunctionData(functionFragment: "bptToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositAndStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "earned", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuraPoolInfo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "showPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllAndUnwrap",
    values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndUnwrap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "auraPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "booster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bptToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuraPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllAndUnwrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndUnwrap",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RecoveredToken(address,address,uint256)": EventFragment;
    "SetAuraPoolInfo(uint32,address,address)": EventFragment;
    "SetOperator(address)": EventFragment;
    "SetRewardsRecipient(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveredToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuraPoolInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardsRecipient"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RecoveredTokenEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type RecoveredTokenEvent = TypedEvent<
  [string, string, BigNumber],
  RecoveredTokenEventObject
>;

export type RecoveredTokenEventFilter = TypedEventFilter<RecoveredTokenEvent>;

export interface SetAuraPoolInfoEventObject {
  pId: number;
  token: string;
  rewards: string;
}
export type SetAuraPoolInfoEvent = TypedEvent<
  [number, string, string],
  SetAuraPoolInfoEventObject
>;

export type SetAuraPoolInfoEventFilter = TypedEventFilter<SetAuraPoolInfoEvent>;

export interface SetOperatorEventObject {
  operator: string;
}
export type SetOperatorEvent = TypedEvent<[string], SetOperatorEventObject>;

export type SetOperatorEventFilter = TypedEventFilter<SetOperatorEvent>;

export interface SetRewardsRecipientEventObject {
  recipient: string;
}
export type SetRewardsRecipientEvent = TypedEvent<
  [string],
  SetRewardsRecipientEventObject
>;

export type SetRewardsRecipientEventFilter =
  TypedEventFilter<SetRewardsRecipientEvent>;

export interface AuraStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuraStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auraPoolInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & { token: string; rewards: string; pId: number }
    >;

    booster(overrides?: CallOverrides): Promise<[string]>;

    bptToken(overrides?: CallOverrides): Promise<[string]>;

    depositAndStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    earned(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { earnedRewards: BigNumber }>;

    getReward(
      claimExtras: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardsRecipient(overrides?: CallOverrides): Promise<[string]>;

    setAuraPoolInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsRecipient(
      _recipeint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    showPositions(
      overrides?: CallOverrides
    ): Promise<
      [AuraStaking.PositionStructOutput] & {
        position: AuraStaking.PositionStructOutput;
      }
    >;

    stakedBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAllAndUnwrap(
      claim: PromiseOrValue<boolean>,
      sendToOperator: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAndUnwrap(
      amount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  auraPoolInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & { token: string; rewards: string; pId: number }
  >;

  booster(overrides?: CallOverrides): Promise<string>;

  bptToken(overrides?: CallOverrides): Promise<string>;

  depositAndStake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  earned(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(
    claimExtras: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverToken(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardsRecipient(overrides?: CallOverrides): Promise<string>;

  setAuraPoolInfo(
    _pId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _rewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsRecipient(
    _recipeint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  showPositions(
    overrides?: CallOverrides
  ): Promise<AuraStaking.PositionStructOutput>;

  stakedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAllAndUnwrap(
    claim: PromiseOrValue<boolean>,
    sendToOperator: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAndUnwrap(
    amount: PromiseOrValue<BigNumberish>,
    claim: PromiseOrValue<boolean>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auraPoolInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & { token: string; rewards: string; pId: number }
    >;

    booster(overrides?: CallOverrides): Promise<string>;

    bptToken(overrides?: CallOverrides): Promise<string>;

    depositAndStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    earned(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      claimExtras: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardsRecipient(overrides?: CallOverrides): Promise<string>;

    setAuraPoolInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsRecipient(
      _recipeint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    showPositions(
      overrides?: CallOverrides
    ): Promise<AuraStaking.PositionStructOutput>;

    stakedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllAndUnwrap(
      claim: PromiseOrValue<boolean>,
      sendToOperator: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndUnwrap(
      amount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RecoveredToken(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): RecoveredTokenEventFilter;
    RecoveredToken(
      token?: null,
      to?: null,
      amount?: null
    ): RecoveredTokenEventFilter;

    "SetAuraPoolInfo(uint32,address,address)"(
      pId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      rewards?: null
    ): SetAuraPoolInfoEventFilter;
    SetAuraPoolInfo(
      pId?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      rewards?: null
    ): SetAuraPoolInfoEventFilter;

    "SetOperator(address)"(operator?: null): SetOperatorEventFilter;
    SetOperator(operator?: null): SetOperatorEventFilter;

    "SetRewardsRecipient(address)"(
      recipient?: null
    ): SetRewardsRecipientEventFilter;
    SetRewardsRecipient(recipient?: null): SetRewardsRecipientEventFilter;
  };

  estimateGas: {
    auraPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    booster(overrides?: CallOverrides): Promise<BigNumber>;

    bptToken(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    earned(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      claimExtras: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    setAuraPoolInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsRecipient(
      _recipeint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    showPositions(overrides?: CallOverrides): Promise<BigNumber>;

    stakedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAllAndUnwrap(
      claim: PromiseOrValue<boolean>,
      sendToOperator: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAndUnwrap(
      amount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auraPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    booster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bptToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositAndStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    earned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      claimExtras: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuraPoolInfo(
      _pId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsRecipient(
      _recipeint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    showPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllAndUnwrap(
      claim: PromiseOrValue<boolean>,
      sendToOperator: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndUnwrap(
      amount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
