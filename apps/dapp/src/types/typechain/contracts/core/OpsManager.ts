/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type RationalStruct = {
  p: PromiseOrValue<BigNumberish>;
  q: PromiseOrValue<BigNumberish>;
};

export type RationalStructOutput = [BigNumber, BigNumber] & {
  p: BigNumber;
  q: BigNumber;
};

export interface OpsManagerInterface extends utils.Interface {
  functions: {
    "activeVaults(address)": FunctionFragment;
    "addRevenue(address[],uint256[])": FunctionFragment;
    "createExposure(string,string,address)": FunctionFragment;
    "createVaultInstance(string,string,uint256,uint256,(uint256,uint256),uint256)": FunctionFragment;
    "increaseVaultTemple(address[],uint256[])": FunctionFragment;
    "joiningFee()": FunctionFragment;
    "liquidateExposures(address[],address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pools(address)": FunctionFragment;
    "rebalance(address[],address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requiresRebalance(address[],address)": FunctionFragment;
    "revalTokens(uint256)": FunctionFragment;
    "setExposureLiquidator(address,address)": FunctionFragment;
    "setExposureMinterState(address,address,bool)": FunctionFragment;
    "templeExposure()": FunctionFragment;
    "templeToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateExposureReval(address[],uint256[])": FunctionFragment;
    "vaultedTemple()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeVaults"
      | "addRevenue"
      | "createExposure"
      | "createVaultInstance"
      | "increaseVaultTemple"
      | "joiningFee"
      | "liquidateExposures"
      | "owner"
      | "pools"
      | "rebalance"
      | "renounceOwnership"
      | "requiresRebalance"
      | "revalTokens"
      | "setExposureLiquidator"
      | "setExposureMinterState"
      | "templeExposure"
      | "templeToken"
      | "transferOwnership"
      | "updateExposureReval"
      | "vaultedTemple"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeVaults",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRevenue",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createExposure",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createVaultInstance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      RationalStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseVaultTemple",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joiningFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateExposures",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiresRebalance",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revalTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExposureLiquidator",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExposureMinterState",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "templeExposure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExposureReval",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultedTemple",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRevenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createExposure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVaultInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseVaultTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joiningFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateExposures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiresRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExposureLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExposureMinterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeExposure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExposureReval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultedTemple",
    data: BytesLike
  ): Result;

  events: {
    "CreateExposure(address,address)": EventFragment;
    "CreateVaultInstance(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateExposure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVaultInstance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CreateExposureEventObject {
  exposure: string;
  primaryRevenue: string;
}
export type CreateExposureEvent = TypedEvent<
  [string, string],
  CreateExposureEventObject
>;

export type CreateExposureEventFilter = TypedEventFilter<CreateExposureEvent>;

export interface CreateVaultInstanceEventObject {
  vault: string;
}
export type CreateVaultInstanceEvent = TypedEvent<
  [string],
  CreateVaultInstanceEventObject
>;

export type CreateVaultInstanceEventFilter =
  TypedEventFilter<CreateVaultInstanceEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface OpsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addRevenue(
      exposureTokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createExposure(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      revalToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVaultInstance(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      periodDuration: PromiseOrValue<BigNumberish>,
      enterExitWindowDuration: PromiseOrValue<BigNumberish>,
      shareBoostFactor: RationalStruct,
      firstPeriodStartTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseVaultTemple(
      vaults: PromiseOrValue<string>[],
      amountsTemple: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joiningFee(overrides?: CallOverrides): Promise<[string]>;

    liquidateExposures(
      vaults: PromiseOrValue<string>[],
      exposureTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rebalance(
      vaults: PromiseOrValue<string>[],
      exposureToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requiresRebalance(
      vaults: PromiseOrValue<string>[],
      exposureToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    revalTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setExposureLiquidator(
      exposureToken: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExposureMinterState(
      exposureToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    templeExposure(overrides?: CallOverrides): Promise<[string]>;

    templeToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExposureReval(
      exposureTokens: PromiseOrValue<string>[],
      revals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultedTemple(overrides?: CallOverrides): Promise<[string]>;
  };

  activeVaults(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addRevenue(
    exposureTokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createExposure(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    revalToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVaultInstance(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    periodDuration: PromiseOrValue<BigNumberish>,
    enterExitWindowDuration: PromiseOrValue<BigNumberish>,
    shareBoostFactor: RationalStruct,
    firstPeriodStartTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseVaultTemple(
    vaults: PromiseOrValue<string>[],
    amountsTemple: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joiningFee(overrides?: CallOverrides): Promise<string>;

  liquidateExposures(
    vaults: PromiseOrValue<string>[],
    exposureTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pools(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  rebalance(
    vaults: PromiseOrValue<string>[],
    exposureToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requiresRebalance(
    vaults: PromiseOrValue<string>[],
    exposureToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  revalTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setExposureLiquidator(
    exposureToken: PromiseOrValue<string>,
    _liquidator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExposureMinterState(
    exposureToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  templeExposure(overrides?: CallOverrides): Promise<string>;

  templeToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExposureReval(
    exposureTokens: PromiseOrValue<string>[],
    revals: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultedTemple(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activeVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addRevenue(
      exposureTokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createExposure(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      revalToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVaultInstance(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      periodDuration: PromiseOrValue<BigNumberish>,
      enterExitWindowDuration: PromiseOrValue<BigNumberish>,
      shareBoostFactor: RationalStruct,
      firstPeriodStartTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseVaultTemple(
      vaults: PromiseOrValue<string>[],
      amountsTemple: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    joiningFee(overrides?: CallOverrides): Promise<string>;

    liquidateExposures(
      vaults: PromiseOrValue<string>[],
      exposureTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    rebalance(
      vaults: PromiseOrValue<string>[],
      exposureToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requiresRebalance(
      vaults: PromiseOrValue<string>[],
      exposureToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    revalTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setExposureLiquidator(
      exposureToken: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExposureMinterState(
      exposureToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    templeExposure(overrides?: CallOverrides): Promise<string>;

    templeToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExposureReval(
      exposureTokens: PromiseOrValue<string>[],
      revals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    vaultedTemple(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CreateExposure(address,address)"(
      exposure?: null,
      primaryRevenue?: null
    ): CreateExposureEventFilter;
    CreateExposure(
      exposure?: null,
      primaryRevenue?: null
    ): CreateExposureEventFilter;

    "CreateVaultInstance(address)"(
      vault?: null
    ): CreateVaultInstanceEventFilter;
    CreateVaultInstance(vault?: null): CreateVaultInstanceEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    activeVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addRevenue(
      exposureTokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createExposure(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      revalToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVaultInstance(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      periodDuration: PromiseOrValue<BigNumberish>,
      enterExitWindowDuration: PromiseOrValue<BigNumberish>,
      shareBoostFactor: RationalStruct,
      firstPeriodStartTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseVaultTemple(
      vaults: PromiseOrValue<string>[],
      amountsTemple: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateExposures(
      vaults: PromiseOrValue<string>[],
      exposureTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(
      vaults: PromiseOrValue<string>[],
      exposureToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requiresRebalance(
      vaults: PromiseOrValue<string>[],
      exposureToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revalTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExposureLiquidator(
      exposureToken: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExposureMinterState(
      exposureToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    templeExposure(overrides?: CallOverrides): Promise<BigNumber>;

    templeToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExposureReval(
      exposureTokens: PromiseOrValue<string>[],
      revals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultedTemple(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activeVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addRevenue(
      exposureTokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createExposure(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      revalToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVaultInstance(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      periodDuration: PromiseOrValue<BigNumberish>,
      enterExitWindowDuration: PromiseOrValue<BigNumberish>,
      shareBoostFactor: RationalStruct,
      firstPeriodStartTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseVaultTemple(
      vaults: PromiseOrValue<string>[],
      amountsTemple: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joiningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateExposures(
      vaults: PromiseOrValue<string>[],
      exposureTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalance(
      vaults: PromiseOrValue<string>[],
      exposureToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requiresRebalance(
      vaults: PromiseOrValue<string>[],
      exposureToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revalTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExposureLiquidator(
      exposureToken: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExposureMinterState(
      exposureToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    templeExposure(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExposureReval(
      exposureTokens: PromiseOrValue<string>[],
      revals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultedTemple(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
