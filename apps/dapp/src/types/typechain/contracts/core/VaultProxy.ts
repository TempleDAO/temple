/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VaultProxyInterface extends utils.Interface {
  functions: {
    "depositTempleFor(uint256,address)": FunctionFragment;
    "depositTempleWithFaith(uint256,uint112,address)": FunctionFragment;
    "faith()": FunctionFragment;
    "faithClaimEnabled()": FunctionFragment;
    "getFaithMultiplier(uint256,uint256)": FunctionFragment;
    "ogTemple()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "temple()": FunctionFragment;
    "templeStaking()": FunctionFragment;
    "toggleFaithClaimEnabled()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeAndDepositIntoVault(uint256,address)": FunctionFragment;
    "unstakeAndDepositTempleWithFaith(uint256,uint112,address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositTempleFor"
      | "depositTempleWithFaith"
      | "faith"
      | "faithClaimEnabled"
      | "getFaithMultiplier"
      | "ogTemple"
      | "owner"
      | "renounceOwnership"
      | "temple"
      | "templeStaking"
      | "toggleFaithClaimEnabled"
      | "transferOwnership"
      | "unstakeAndDepositIntoVault"
      | "unstakeAndDepositTempleWithFaith"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositTempleFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTempleWithFaith",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "faith", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "faithClaimEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFaithMultiplier",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ogTemple", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "temple", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "templeStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleFaithClaimEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndDepositIntoVault",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndDepositTempleWithFaith",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositTempleFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTempleWithFaith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "faith", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "faithClaimEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFaithMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ogTemple", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "temple", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "templeStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleFaithClaimEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndDepositIntoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndDepositTempleWithFaith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VaultProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositTempleFor(
      _amount: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositTempleWithFaith(
      _amountTemple: PromiseOrValue<BigNumberish>,
      _amountFaith: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    faith(overrides?: CallOverrides): Promise<[string]>;

    faithClaimEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    getFaithMultiplier(
      _amountFaith: PromiseOrValue<BigNumberish>,
      _amountTemple: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ogTemple(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    temple(overrides?: CallOverrides): Promise<[string]>;

    templeStaking(overrides?: CallOverrides): Promise<[string]>;

    toggleFaithClaimEnabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeAndDepositIntoVault(
      _amountOGT: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeAndDepositTempleWithFaith(
      _amountOGT: PromiseOrValue<BigNumberish>,
      _amountFaith: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositTempleFor(
    _amount: PromiseOrValue<BigNumberish>,
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositTempleWithFaith(
    _amountTemple: PromiseOrValue<BigNumberish>,
    _amountFaith: PromiseOrValue<BigNumberish>,
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  faith(overrides?: CallOverrides): Promise<string>;

  faithClaimEnabled(overrides?: CallOverrides): Promise<boolean>;

  getFaithMultiplier(
    _amountFaith: PromiseOrValue<BigNumberish>,
    _amountTemple: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ogTemple(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  temple(overrides?: CallOverrides): Promise<string>;

  templeStaking(overrides?: CallOverrides): Promise<string>;

  toggleFaithClaimEnabled(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeAndDepositIntoVault(
    _amountOGT: PromiseOrValue<BigNumberish>,
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeAndDepositTempleWithFaith(
    _amountOGT: PromiseOrValue<BigNumberish>,
    _amountFaith: PromiseOrValue<BigNumberish>,
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositTempleFor(
      _amount: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositTempleWithFaith(
      _amountTemple: PromiseOrValue<BigNumberish>,
      _amountFaith: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    faith(overrides?: CallOverrides): Promise<string>;

    faithClaimEnabled(overrides?: CallOverrides): Promise<boolean>;

    getFaithMultiplier(
      _amountFaith: PromiseOrValue<BigNumberish>,
      _amountTemple: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ogTemple(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    temple(overrides?: CallOverrides): Promise<string>;

    templeStaking(overrides?: CallOverrides): Promise<string>;

    toggleFaithClaimEnabled(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeAndDepositIntoVault(
      _amountOGT: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeAndDepositTempleWithFaith(
      _amountOGT: PromiseOrValue<BigNumberish>,
      _amountFaith: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    depositTempleFor(
      _amount: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositTempleWithFaith(
      _amountTemple: PromiseOrValue<BigNumberish>,
      _amountFaith: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    faith(overrides?: CallOverrides): Promise<BigNumber>;

    faithClaimEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    getFaithMultiplier(
      _amountFaith: PromiseOrValue<BigNumberish>,
      _amountTemple: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ogTemple(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    temple(overrides?: CallOverrides): Promise<BigNumber>;

    templeStaking(overrides?: CallOverrides): Promise<BigNumber>;

    toggleFaithClaimEnabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeAndDepositIntoVault(
      _amountOGT: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeAndDepositTempleWithFaith(
      _amountOGT: PromiseOrValue<BigNumberish>,
      _amountFaith: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositTempleFor(
      _amount: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositTempleWithFaith(
      _amountTemple: PromiseOrValue<BigNumberish>,
      _amountFaith: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    faith(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    faithClaimEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFaithMultiplier(
      _amountFaith: PromiseOrValue<BigNumberish>,
      _amountTemple: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ogTemple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    temple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templeStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleFaithClaimEnabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAndDepositIntoVault(
      _amountOGT: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAndDepositTempleWithFaith(
      _amountOGT: PromiseOrValue<BigNumberish>,
      _amountFaith: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
