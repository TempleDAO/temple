/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LockedOGTempleInterface extends utils.Interface {
  contractName: "LockedOGTemple";
  functions: {
    "lock(uint256,uint256)": FunctionFragment;
    "lockFor(address,uint256,uint256)": FunctionFragment;
    "ogTempleLocked(address)": FunctionFragment;
    "ogTempleToken()": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
    "unlockFor(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ogTempleLocked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ogTempleToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFor",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ogTempleLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ogTempleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlockFor", data: BytesLike): Result;

  events: {
    "Lock(address,uint256,uint256,uint256)": EventFragment;
    "Unlock(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
}

export type LockEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    staker: string;
    increasedByOgTemple: BigNumber;
    totalLockedOgTemple: BigNumber;
    lockedUntil: BigNumber;
  }
>;

export type LockEventFilter = TypedEventFilter<LockEvent>;

export type UnlockEvent = TypedEvent<
  [string, BigNumber],
  { staker: string; amount: BigNumber }
>;

export type UnlockEventFilter = TypedEventFilter<UnlockEvent>;

export interface LockedOGTemple extends BaseContract {
  contractName: "LockedOGTemple";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LockedOGTempleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lock(
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      _unlockDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ogTempleLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount: BigNumber;
        lockedUntilTimestamp: BigNumber;
      }
    >;

    ogTempleToken(overrides?: CallOverrides): Promise<[string]>;

    unlock(
      _amountOGTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lock(
    _amountOGTemple: BigNumberish,
    _lockedUntilTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockFor(
    _staker: string,
    _amountOGTemple: BigNumberish,
    _unlockDelaySeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ogTempleLocked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amount: BigNumber;
      lockedUntilTimestamp: BigNumber;
    }
  >;

  ogTempleToken(overrides?: CallOverrides): Promise<string>;

  unlock(
    _amountOGTemple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockFor(
    _staker: string,
    _amountOGTemple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lock(
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      _unlockDelaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ogTempleLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount: BigNumber;
        lockedUntilTimestamp: BigNumber;
      }
    >;

    ogTempleToken(overrides?: CallOverrides): Promise<string>;

    unlock(
      _amountOGTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Lock(address,uint256,uint256,uint256)"(
      staker?: null,
      increasedByOgTemple?: null,
      totalLockedOgTemple?: null,
      lockedUntil?: null
    ): LockEventFilter;
    Lock(
      staker?: null,
      increasedByOgTemple?: null,
      totalLockedOgTemple?: null,
      lockedUntil?: null
    ): LockEventFilter;

    "Unlock(address,uint256)"(staker?: null, amount?: null): UnlockEventFilter;
    Unlock(staker?: null, amount?: null): UnlockEventFilter;
  };

  estimateGas: {
    lock(
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      _unlockDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ogTempleLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ogTempleToken(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      _amountOGTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lock(
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      _unlockDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ogTempleLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ogTempleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      _amountOGTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
