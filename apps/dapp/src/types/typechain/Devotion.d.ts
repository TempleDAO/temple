/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DevotionInterface extends ethers.utils.Interface {
  functions: {
    "addDevotionMaster(address)": FunctionFragment;
    "claimTempleReward(uint112)": FunctionFragment;
    "claimableTempleRewardQuote(uint256)": FunctionFragment;
    "currentRound()": FunctionFragment;
    "devotionMaster(address)": FunctionFragment;
    "endDevotionRound()": FunctionFragment;
    "faith()": FunctionFragment;
    "initiateDevotionFinalHour()": FunctionFragment;
    "lockAndVerify(uint256)": FunctionFragment;
    "lockedOGTemple()": FunctionFragment;
    "minimumLockPeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "pair()": FunctionFragment;
    "priceCumulativeLastTemple()": FunctionFragment;
    "priceCumulativeLastTimestamp()": FunctionFragment;
    "removeDevotionMaster(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roundStatus(uint8)": FunctionFragment;
    "setMinimumLockPeriod(uint256)": FunctionFragment;
    "startDevotion(uint112,uint112)": FunctionFragment;
    "targetPriceAverageTemple()": FunctionFragment;
    "templeStaking()": FunctionFragment;
    "templeToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifiedFaith(uint8,address)": FunctionFragment;
    "verifyFaith()": FunctionFragment;
    "verifyFaithQuote(address)": FunctionFragment;
    "withdrawBalance(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDevotionMaster",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTempleReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableTempleRewardQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devotionMaster",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "endDevotionRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "faith", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initiateDevotionFinalHour",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockAndVerify",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedOGTemple",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceCumulativeLastTemple",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceCumulativeLastTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDevotionMaster",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumLockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startDevotion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetPriceAverageTemple",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templeStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedFaith",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFaith",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFaithQuote",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDevotionMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTempleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableTempleRewardQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devotionMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endDevotionRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "faith", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateDevotionFinalHour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockAndVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedOGTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceCumulativeLastTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceCumulativeLastTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDevotionMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startDevotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetPriceAverageTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedFaith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyFaith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyFaithQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;

  events: {
    "ClaimTempleRewards(address,uint256,uint256)": EventFragment;
    "EndDevotion(uint256,bool)": EventFragment;
    "InitiateFinalHour(uint256,uint256,uint8)": EventFragment;
    "LockAndVerifyFaith(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StartDevotion(uint256,uint256,uint8)": EventFragment;
    "VerifyFaith(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimTempleRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndDevotion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateFinalHour"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockAndVerifyFaith"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartDevotion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifyFaith"): EventFragment;
}

export type ClaimTempleRewardsEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    faithUsed: BigNumber;
    templeRewarded: BigNumber;
  }
>;

export type EndDevotionEvent = TypedEvent<
  [BigNumber, boolean] & { templePriceAverage: BigNumber; GameWon: boolean }
>;

export type InitiateFinalHourEvent = TypedEvent<
  [BigNumber, BigNumber, number] & {
    templePriceCumulativeLast: BigNumber;
    blockTimeStampLast: BigNumber;
    currentRound: number;
  }
>;

export type LockAndVerifyFaithEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    account: string;
    faithAmount: BigNumber;
    lockedOgTempleAmount: BigNumber;
    lockedUntilTimeStamp: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StartDevotionEvent = TypedEvent<
  [BigNumber, BigNumber, number] & {
    targetPriceNum: BigNumber;
    targetPriceDenom: BigNumber;
    currentRound: number;
  }
>;

export type VerifyFaithEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    account: string;
    faithAmount: BigNumber;
    lockedOgTempleAmount: BigNumber;
    lockedUntilTimeStamp: BigNumber;
  }
>;

export class Devotion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DevotionInterface;

  functions: {
    addDevotionMaster(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTempleReward(
      amountFaith: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableTempleRewardQuote(
      amountFaith: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentRound(overrides?: CallOverrides): Promise<[number]>;

    devotionMaster(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    endDevotionRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    faith(overrides?: CallOverrides): Promise<[string]>;

    initiateDevotionFinalHour(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockAndVerify(
      amountOGTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedOGTemple(overrides?: CallOverrides): Promise<[string]>;

    minimumLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    priceCumulativeLastTemple(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceCumulativeLastTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeDevotionMaster(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roundStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { stage: number; isWon: boolean }>;

    setMinimumLockPeriod(
      _minimumLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startDevotion(
      targetPriceNum: BigNumberish,
      targetPriceDenom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetPriceAverageTemple(overrides?: CallOverrides): Promise<[BigNumber]>;

    templeStaking(overrides?: CallOverrides): Promise<[string]>;

    templeToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifiedFaith(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyFaith(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyFaithQuote(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { canClaim: boolean; claimableFaith: BigNumber }
    >;

    withdrawBalance(
      token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addDevotionMaster(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTempleReward(
    amountFaith: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableTempleRewardQuote(
    amountFaith: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentRound(overrides?: CallOverrides): Promise<number>;

  devotionMaster(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  endDevotionRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  faith(overrides?: CallOverrides): Promise<string>;

  initiateDevotionFinalHour(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockAndVerify(
    amountOGTemple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedOGTemple(overrides?: CallOverrides): Promise<string>;

  minimumLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  priceCumulativeLastTemple(overrides?: CallOverrides): Promise<BigNumber>;

  priceCumulativeLastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  removeDevotionMaster(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roundStatus(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, boolean] & { stage: number; isWon: boolean }>;

  setMinimumLockPeriod(
    _minimumLockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startDevotion(
    targetPriceNum: BigNumberish,
    targetPriceDenom: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetPriceAverageTemple(overrides?: CallOverrides): Promise<BigNumber>;

  templeStaking(overrides?: CallOverrides): Promise<string>;

  templeToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifiedFaith(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyFaith(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyFaithQuote(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { canClaim: boolean; claimableFaith: BigNumber }
  >;

  withdrawBalance(
    token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDevotionMaster(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTempleReward(
      amountFaith: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableTempleRewardQuote(
      amountFaith: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<number>;

    devotionMaster(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    endDevotionRound(overrides?: CallOverrides): Promise<void>;

    faith(overrides?: CallOverrides): Promise<string>;

    initiateDevotionFinalHour(overrides?: CallOverrides): Promise<void>;

    lockAndVerify(
      amountOGTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedOGTemple(overrides?: CallOverrides): Promise<string>;

    minimumLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    priceCumulativeLastTemple(overrides?: CallOverrides): Promise<BigNumber>;

    priceCumulativeLastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    removeDevotionMaster(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roundStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { stage: number; isWon: boolean }>;

    setMinimumLockPeriod(
      _minimumLockPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startDevotion(
      targetPriceNum: BigNumberish,
      targetPriceDenom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    targetPriceAverageTemple(overrides?: CallOverrides): Promise<BigNumber>;

    templeStaking(overrides?: CallOverrides): Promise<string>;

    templeToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifiedFaith(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyFaith(overrides?: CallOverrides): Promise<void>;

    verifyFaithQuote(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { canClaim: boolean; claimableFaith: BigNumber }
    >;

    withdrawBalance(
      token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimTempleRewards(address,uint256,uint256)"(
      account?: null,
      faithUsed?: null,
      templeRewarded?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; faithUsed: BigNumber; templeRewarded: BigNumber }
    >;

    ClaimTempleRewards(
      account?: null,
      faithUsed?: null,
      templeRewarded?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; faithUsed: BigNumber; templeRewarded: BigNumber }
    >;

    "EndDevotion(uint256,bool)"(
      templePriceAverage?: null,
      GameWon?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { templePriceAverage: BigNumber; GameWon: boolean }
    >;

    EndDevotion(
      templePriceAverage?: null,
      GameWon?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { templePriceAverage: BigNumber; GameWon: boolean }
    >;

    "InitiateFinalHour(uint256,uint256,uint8)"(
      templePriceCumulativeLast?: null,
      blockTimeStampLast?: null,
      currentRound?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      {
        templePriceCumulativeLast: BigNumber;
        blockTimeStampLast: BigNumber;
        currentRound: number;
      }
    >;

    InitiateFinalHour(
      templePriceCumulativeLast?: null,
      blockTimeStampLast?: null,
      currentRound?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      {
        templePriceCumulativeLast: BigNumber;
        blockTimeStampLast: BigNumber;
        currentRound: number;
      }
    >;

    "LockAndVerifyFaith(address,uint256,uint256,uint256)"(
      account?: null,
      faithAmount?: null,
      lockedOgTempleAmount?: null,
      lockedUntilTimeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        faithAmount: BigNumber;
        lockedOgTempleAmount: BigNumber;
        lockedUntilTimeStamp: BigNumber;
      }
    >;

    LockAndVerifyFaith(
      account?: null,
      faithAmount?: null,
      lockedOgTempleAmount?: null,
      lockedUntilTimeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        faithAmount: BigNumber;
        lockedOgTempleAmount: BigNumber;
        lockedUntilTimeStamp: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "StartDevotion(uint256,uint256,uint8)"(
      targetPriceNum?: null,
      targetPriceDenom?: null,
      currentRound?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      {
        targetPriceNum: BigNumber;
        targetPriceDenom: BigNumber;
        currentRound: number;
      }
    >;

    StartDevotion(
      targetPriceNum?: null,
      targetPriceDenom?: null,
      currentRound?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      {
        targetPriceNum: BigNumber;
        targetPriceDenom: BigNumber;
        currentRound: number;
      }
    >;

    "VerifyFaith(address,uint256,uint256,uint256)"(
      account?: null,
      faithAmount?: null,
      lockedOgTempleAmount?: null,
      lockedUntilTimeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        faithAmount: BigNumber;
        lockedOgTempleAmount: BigNumber;
        lockedUntilTimeStamp: BigNumber;
      }
    >;

    VerifyFaith(
      account?: null,
      faithAmount?: null,
      lockedOgTempleAmount?: null,
      lockedUntilTimeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        faithAmount: BigNumber;
        lockedOgTempleAmount: BigNumber;
        lockedUntilTimeStamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    addDevotionMaster(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTempleReward(
      amountFaith: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableTempleRewardQuote(
      amountFaith: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    devotionMaster(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    endDevotionRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    faith(overrides?: CallOverrides): Promise<BigNumber>;

    initiateDevotionFinalHour(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockAndVerify(
      amountOGTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedOGTemple(overrides?: CallOverrides): Promise<BigNumber>;

    minimumLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    priceCumulativeLastTemple(overrides?: CallOverrides): Promise<BigNumber>;

    priceCumulativeLastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    removeDevotionMaster(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roundStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinimumLockPeriod(
      _minimumLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startDevotion(
      targetPriceNum: BigNumberish,
      targetPriceDenom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetPriceAverageTemple(overrides?: CallOverrides): Promise<BigNumber>;

    templeStaking(overrides?: CallOverrides): Promise<BigNumber>;

    templeToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifiedFaith(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyFaith(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyFaithQuote(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBalance(
      token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDevotionMaster(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTempleReward(
      amountFaith: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableTempleRewardQuote(
      amountFaith: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devotionMaster(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endDevotionRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    faith(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateDevotionFinalHour(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockAndVerify(
      amountOGTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedOGTemple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumLockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceCumulativeLastTemple(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceCumulativeLastTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDevotionMaster(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roundStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinimumLockPeriod(
      _minimumLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startDevotion(
      targetPriceNum: BigNumberish,
      targetPriceDenom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetPriceAverageTemple(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    templeStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifiedFaith(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyFaith(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyFaithQuote(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
