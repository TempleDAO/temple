/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type RationalStruct = { p: BigNumberish; q: BigNumberish };

export type RationalStructOutput = [BigNumber, BigNumber] & {
  p: BigNumber;
  q: BigNumber;
};

export interface OpsManagerInterface extends utils.Interface {
  contractName: "OpsManager";
  functions: {
    "activeExposures(uint256)": FunctionFragment;
    "activeVaults(address)": FunctionFragment;
    "addRevenue(address[],uint256)": FunctionFragment;
    "claim(address[],address)": FunctionFragment;
    "createExposure(string,string,address)": FunctionFragment;
    "createVault(string,string,uint256,uint256,(uint256,uint256))": FunctionFragment;
    "joiningFee()": FunctionFragment;
    "liquidateExposures(address[],address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pools(address)": FunctionFragment;
    "rebalance(address[],address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requiresRebalance(address[],address)": FunctionFragment;
    "templeToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeExposures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeVaults",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRevenue",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "createExposure",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [string, string, BigNumberish, BigNumberish, RationalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "joiningFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateExposures",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiresRebalance",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "templeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeExposures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRevenue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createExposure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joiningFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateExposures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiresRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CreateExposure(address,address)": EventFragment;
    "CreateVault(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateExposure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CreateExposureEvent = TypedEvent<
  [string, string],
  { exposure: string; primaryRevenue: string }
>;

export type CreateExposureEventFilter = TypedEventFilter<CreateExposureEvent>;

export type CreateVaultEvent = TypedEvent<[string], { vault: string }>;

export type CreateVaultEventFilter = TypedEventFilter<CreateVaultEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface OpsManager extends BaseContract {
  contractName: "OpsManager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeExposures(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    activeVaults(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    addRevenue(
      exposures: string[],
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      vaults: string[],
      exposure: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createExposure(
      name: string,
      symbol: string,
      revalToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createVault(
      name: string,
      symbol: string,
      periodDuration: BigNumberish,
      enterExitWindowDuration: BigNumberish,
      shareBoostFactory: RationalStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joiningFee(overrides?: CallOverrides): Promise<[string]>;

    liquidateExposures(
      vaults: string[],
      exposures: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pools(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      vaults: string[],
      exposure: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiresRebalance(
      vaults: string[],
      exposure: string,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    templeToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeExposures(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  activeVaults(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  addRevenue(
    exposures: string[],
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    vaults: string[],
    exposure: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createExposure(
    name: string,
    symbol: string,
    revalToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createVault(
    name: string,
    symbol: string,
    periodDuration: BigNumberish,
    enterExitWindowDuration: BigNumberish,
    shareBoostFactory: RationalStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joiningFee(overrides?: CallOverrides): Promise<string>;

  liquidateExposures(
    vaults: string[],
    exposures: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pools(arg0: string, overrides?: CallOverrides): Promise<string>;

  rebalance(
    vaults: string[],
    exposure: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiresRebalance(
    vaults: string[],
    exposure: string,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  templeToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeExposures(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    activeVaults(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    addRevenue(
      exposures: string[],
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      vaults: string[],
      exposure: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createExposure(
      name: string,
      symbol: string,
      revalToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createVault(
      name: string,
      symbol: string,
      periodDuration: BigNumberish,
      enterExitWindowDuration: BigNumberish,
      shareBoostFactory: RationalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    joiningFee(overrides?: CallOverrides): Promise<string>;

    liquidateExposures(
      vaults: string[],
      exposures: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pools(arg0: string, overrides?: CallOverrides): Promise<string>;

    rebalance(
      vaults: string[],
      exposure: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requiresRebalance(
      vaults: string[],
      exposure: string,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    templeToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreateExposure(address,address)"(
      exposure?: null,
      primaryRevenue?: null
    ): CreateExposureEventFilter;
    CreateExposure(
      exposure?: null,
      primaryRevenue?: null
    ): CreateExposureEventFilter;

    "CreateVault(address)"(vault?: null): CreateVaultEventFilter;
    CreateVault(vault?: null): CreateVaultEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    activeExposures(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeVaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addRevenue(
      exposures: string[],
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      vaults: string[],
      exposure: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createExposure(
      name: string,
      symbol: string,
      revalToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createVault(
      name: string,
      symbol: string,
      periodDuration: BigNumberish,
      enterExitWindowDuration: BigNumberish,
      shareBoostFactory: RationalStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joiningFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateExposures(
      vaults: string[],
      exposures: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      vaults: string[],
      exposure: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiresRebalance(
      vaults: string[],
      exposure: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    templeToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeExposures(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeVaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addRevenue(
      exposures: string[],
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      vaults: string[],
      exposure: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createExposure(
      name: string,
      symbol: string,
      revalToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createVault(
      name: string,
      symbol: string,
      periodDuration: BigNumberish,
      enterExitWindowDuration: BigNumberish,
      shareBoostFactory: RationalStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joiningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateExposures(
      vaults: string[],
      exposures: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalance(
      vaults: string[],
      exposure: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiresRebalance(
      vaults: string[],
      exposure: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    templeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
