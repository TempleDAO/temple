/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TreasuryFarmingRevenue,
  TreasuryFarmingRevenueInterface,
} from "../TreasuryFarmingRevenue";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Exposure",
        name: "_exposure",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DecreaseShares",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "IncreaseShares",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "revenueClaimed",
        type: "uint256",
      },
    ],
    name: "RevenueClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "revenueEarned",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lifetimeAccRevenueScaledByShare",
        type: "uint256",
      },
    ],
    name: "RevenueEarned",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "revenueEarned",
        type: "uint256",
      },
    ],
    name: "addRevenue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "claimFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimedByScaled",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "decreaseShares",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exposure",
    outputs: [
      {
        internalType: "contract Exposure",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseShares",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lifetimeAccRevenueScaledByShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "shares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610a86380380610a8683398101604081905261002f9161009d565b6100383361004d565b60601b6001600160601b0319166080526100cb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ae578081fd5b81516001600160a01b03811681146100c4578182fd5b9392505050565b60805160601c6109966100f0600039600081816101d8015261052a01526109966000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638da5cb5b11610081578063de5e63301161005b578063de5e6330146101ca578063ebf7a41e146101d3578063f2fde38b146101fa57600080fd5b80638da5cb5b14610158578063ce7c2ac214610197578063ddeae033146101b757600080fd5b8063715018a6116100b2578063715018a61461012a57806386c011db1461013257806387983d131461014557600080fd5b806326603b95146100d95780633a98ef391461010c57806363ec512d14610115575b600080fd5b6100f96100e736600461082a565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100f960025481565b610128610123366004610874565b61020d565b005b61012861028a565b61012861014036600461084b565b61029e565b61012861015336600461084b565b61039d565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b6100f96101a536600461082a565b60016020526000908152604090205481565b6101286101c536600461082a565b610494565b6100f960045481565b6101727f000000000000000000000000000000000000000000000000000000000000000081565b61012861020836600461082a565b61064f565b61021561070b565b60025461022a670de0b6b3a7640000836108dd565b61023491906108a4565b60046000828254610245919061088c565b90915550506004546040805183815260208101929092527f44c8e79be0ba50742684a585db3a9db56735a204cfa14b6d54fadc2b141ebd89910160405180910390a150565b61029261070b565b61029c600061078c565b565b6102a661070b565b6102af82610494565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906102e490849061088c565b9250508190555080600260008282546102fd919061088c565b909155505060045461030f90826108dd565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805490919061034490849061088c565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f50de8324aee226699209f9c49e31220e9e7e4f7a3d2d76060d913995cd11148e91015b60405180910390a15050565b6103a561070b565b6103ae82610494565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906103e390849061091a565b9250508190555080600260008282546103fc919061091a565b909155505060045461040e90826108dd565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805490919061044390849061091a565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f7f057847ef731c18392c410072b87537e1ebd5fc3ca97d90d44e23f10010e2919101610391565b60045473ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081205490916104c8916108dd565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040812054919250906104fc908361091a565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526003602052604090208490559091507f0000000000000000000000000000000000000000000000000000000000000000166340c10f1984610562670de0b6b3a7640000856108a4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156105cd57600080fd5b505af11580156105e1573d6000803e3d6000fd5b505050507fc15f451120b13b6b40c6ad6203614ab3088308bef9150c0d6f46ea79bf46422483670de0b6b3a76400008361061b91906108a4565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091520160405180910390a1505050565b61065761070b565b73ffffffffffffffffffffffffffffffffffffffff81166106ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107088161078c565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461029c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f6565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461082557600080fd5b919050565b60006020828403121561083b578081fd5b61084482610801565b9392505050565b6000806040838503121561085d578081fd5b61086683610801565b946020939093013593505050565b600060208284031215610885578081fd5b5035919050565b6000821982111561089f5761089f610931565b500190565b6000826108d8577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561091557610915610931565b500290565b60008282101561092c5761092c610931565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212206a22ddbe312231b81f0320392db66e8a0f5e7e77f95bd30a6064aac48769407964736f6c63430008040033";

type TreasuryFarmingRevenueConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TreasuryFarmingRevenueConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TreasuryFarmingRevenue__factory extends ContractFactory {
  constructor(...args: TreasuryFarmingRevenueConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TreasuryFarmingRevenue";
  }

  deploy(
    _exposure: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TreasuryFarmingRevenue> {
    return super.deploy(
      _exposure,
      overrides || {}
    ) as Promise<TreasuryFarmingRevenue>;
  }
  getDeployTransaction(
    _exposure: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_exposure, overrides || {});
  }
  attach(address: string): TreasuryFarmingRevenue {
    return super.attach(address) as TreasuryFarmingRevenue;
  }
  connect(signer: Signer): TreasuryFarmingRevenue__factory {
    return super.connect(signer) as TreasuryFarmingRevenue__factory;
  }
  static readonly contractName: "TreasuryFarmingRevenue";
  public readonly contractName: "TreasuryFarmingRevenue";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasuryFarmingRevenueInterface {
    return new utils.Interface(_abi) as TreasuryFarmingRevenueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TreasuryFarmingRevenue {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TreasuryFarmingRevenue;
  }
}
