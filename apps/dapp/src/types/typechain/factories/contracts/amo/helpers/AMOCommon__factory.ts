/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AMOCommon,
  AMOCommonInterface,
} from "../../../../contracts/amo/helpers/AMOCommon";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "AboveCappedAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "HighSlippage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expectedAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actualAmount",
        type: "uint256",
      },
    ],
    name: "InsufficientAmountOutPostcall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "InsufficientBPTAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "InvalidBPSValue",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidBalancerVaultRequest",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bptMaxAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stableMaxAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "templeMaxAmount",
        type: "uint256",
      },
    ],
    name: "InvalidMaxAmounts",
    type: "error",
  },
  {
    inputs: [],
    name: "NoRebalanceDown",
    type: "error",
  },
  {
    inputs: [],
    name: "NoRebalanceUp",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughCooldown",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOperator",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOperatorOrOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyAMO",
    type: "error",
  },
  {
    inputs: [],
    name: "Paused",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroSwapLimit",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220efdb40794c1f74bf19989c4f2a317cbfd72349562c5bea226305011d4a74c56264736f6c63430008040033";

type AMOCommonConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AMOCommonConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AMOCommon__factory extends ContractFactory {
  constructor(...args: AMOCommonConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AMOCommon> {
    return super.deploy(overrides || {}) as Promise<AMOCommon>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AMOCommon {
    return super.attach(address) as AMOCommon;
  }
  override connect(signer: Signer): AMOCommon__factory {
    return super.connect(signer) as AMOCommon__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AMOCommonInterface {
    return new utils.Interface(_abi) as AMOCommonInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AMOCommon {
    return new Contract(address, _abi, signerOrProvider) as AMOCommon;
  }
}
