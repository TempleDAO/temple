/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  AMO__IPoolHelper,
  AMO__IPoolHelperInterface,
} from "../../../../contracts/amo/interfaces/AMO__IPoolHelper";

const _abi = [
  {
    inputs: [],
    name: "balancerPoolId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "balancerVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "temple",
        type: "address",
      },
      {
        internalType: "address",
        name: "stable",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "exitTokenIndex",
        type: "uint256",
      },
    ],
    name: "createPoolExitRequest",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "assets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "minAmountsOut",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct AMO__IBalancerVault.ExitPoolRequest",
        name: "request",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "temple",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "stable",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minTokenOut",
        type: "uint256",
      },
    ],
    name: "createPoolJoinRequest",
    outputs: [
      {
        components: [
          {
            internalType: "contract IERC20[]",
            name: "assets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "maxAmountsIn",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct AMO__IBalancerVault.JoinPoolRequest",
        name: "request",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rebalancePercentageBoundLow",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rebalancePercentageBoundUp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "postRebalanceSlippage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "exitTokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "templePriceFloorNumerator",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "exitPoolToken",
        type: "address",
      },
    ],
    name: "exitPool",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "getMax",
    outputs: [
      {
        internalType: "uint256",
        name: "maxValue",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "spotPriceBeforeScaled",
        type: "uint256",
      },
    ],
    name: "getSlippage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSpotPriceScaled",
    outputs: [
      {
        internalType: "uint256",
        name: "spotPriceScaled",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slippage",
        type: "uint256",
      },
    ],
    name: "isSpotPriceAboveTPF",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isSpotPriceAboveTPF",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isSpotPriceAboveTPFUpperBound",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slippage",
        type: "uint256",
      },
    ],
    name: "isSpotPriceBelowTPF",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isSpotPriceBelowTPF",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isSpotPriceBelowTPFLowerBound",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBptOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rebalancePercentageBoundUp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rebalancePercentageBoundLow",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "templePriceFloorNumerator",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "postRebalanceSlippage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "joinTokenIndex",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "joinPoolToken",
        type: "address",
      },
    ],
    name: "joinPool",
    outputs: [
      {
        internalType: "uint256",
        name: "bptIn",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "spotPriceUsingLPRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "templeBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stableBalance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "templeBalancerPoolIndex",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokensOut",
        type: "uint256",
      },
    ],
    name: "willExitTakePriceAboveTPFUpperBound",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokensIn",
        type: "uint256",
      },
    ],
    name: "willJoinTakePriceBelowTPFLowerBound",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class AMO__IPoolHelper__factory {
  static readonly abi = _abi;
  static createInterface(): AMO__IPoolHelperInterface {
    return new utils.Interface(_abi) as AMO__IPoolHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AMO__IPoolHelper {
    return new Contract(address, _abi, signerOrProvider) as AMO__IPoolHelper;
  }
}
