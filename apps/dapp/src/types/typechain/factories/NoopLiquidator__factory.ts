/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NoopLiquidator,
  NoopLiquidatorInterface,
} from "../NoopLiquidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract TempleERC20Token",
        name: "_templeToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "toAccount",
        type: "address",
      },
    ],
    name: "toTemple",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101f63803806101f683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610165806100916000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634d4c23a814610030575b600080fd5b61004361003e3660046100e8565b610055565b60405190815260200160405180910390f35b600080546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b1580156100ca57600080fd5b505af11580156100de573d6000803e3d6000fd5b5050505092915050565b600080604083850312156100fa578182fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff81168114610124578182fd5b80915050925092905056fea2646970667358221220a802466fc0aee165dc42fddc279a81c19259e7949274206e2132c56969616aba64736f6c63430008040033";

type NoopLiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NoopLiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NoopLiquidator__factory extends ContractFactory {
  constructor(...args: NoopLiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NoopLiquidator";
  }

  deploy(
    _templeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NoopLiquidator> {
    return super.deploy(
      _templeToken,
      overrides || {}
    ) as Promise<NoopLiquidator>;
  }
  getDeployTransaction(
    _templeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_templeToken, overrides || {});
  }
  attach(address: string): NoopLiquidator {
    return super.attach(address) as NoopLiquidator;
  }
  connect(signer: Signer): NoopLiquidator__factory {
    return super.connect(signer) as NoopLiquidator__factory;
  }
  static readonly contractName: "NoopLiquidator";
  public readonly contractName: "NoopLiquidator";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NoopLiquidatorInterface {
    return new utils.Interface(_abi) as NoopLiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NoopLiquidator {
    return new Contract(address, _abi, signerOrProvider) as NoopLiquidator;
  }
}
