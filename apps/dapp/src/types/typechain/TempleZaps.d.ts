/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TempleZapsInterface extends ethers.utils.Interface {
  functions: {
    "TEMPLE()": FunctionFragment;
    "TEMPLE_FRAX_AMM_ROUTER()": FunctionFragment;
    "approvedTargets(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "permittableTokens(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setApprovedTargets(address[],bool[])": FunctionFragment;
    "setPermittableTokens(address[],bool[])": FunctionFragment;
    "toggleContractActive()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAMMRouter(address)": FunctionFragment;
    "updateTemple(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
    "zapIn(address,uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "zapInWithPermit(address,uint256,uint256,uint256,address,bytes,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TEMPLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TEMPLE_FRAX_AMM_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTargets",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permittableTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedTargets",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermittableTokens",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleContractActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAMMRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTemple",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zapIn",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapInWithPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "TEMPLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TEMPLE_FRAX_AMM_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permittableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermittableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleContractActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAMMRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zapInWithPermit",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "zappedIn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "zappedIn"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type zappedInEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amountReceived: BigNumber }
>;

export class TempleZaps extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TempleZapsInterface;

  functions: {
    TEMPLE(overrides?: CallOverrides): Promise<[string]>;

    TEMPLE_FRAX_AMM_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    approvedTargets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permittableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermittableTokens(
      tokens: string[],
      isPermittable: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleContractActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAMMRouter(
      _ammRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTemple(
      _temple: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapIn(
      fromToken: string,
      fromAmount: BigNumberish,
      minTempleReceived: BigNumberish,
      ammDeadline: BigNumberish,
      swapTarget: string,
      swapData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapInWithPermit(
      fromToken: string,
      fromAmount: BigNumberish,
      minTempleReceived: BigNumberish,
      ammDeadline: BigNumberish,
      swapTarget: string,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TEMPLE(overrides?: CallOverrides): Promise<string>;

  TEMPLE_FRAX_AMM_ROUTER(overrides?: CallOverrides): Promise<string>;

  approvedTargets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permittableTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovedTargets(
    targets: string[],
    isApproved: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermittableTokens(
    tokens: string[],
    isPermittable: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleContractActive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAMMRouter(
    _ammRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTemple(
    _temple: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapIn(
    fromToken: string,
    fromAmount: BigNumberish,
    minTempleReceived: BigNumberish,
    ammDeadline: BigNumberish,
    swapTarget: string,
    swapData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapInWithPermit(
    fromToken: string,
    fromAmount: BigNumberish,
    minTempleReceived: BigNumberish,
    ammDeadline: BigNumberish,
    swapTarget: string,
    swapData: BytesLike,
    permitDeadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TEMPLE(overrides?: CallOverrides): Promise<string>;

    TEMPLE_FRAX_AMM_ROUTER(overrides?: CallOverrides): Promise<string>;

    approvedTargets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permittableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPermittableTokens(
      tokens: string[],
      isPermittable: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    toggleContractActive(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAMMRouter(
      _ammRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTemple(_temple: string, overrides?: CallOverrides): Promise<void>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    zapIn(
      fromToken: string,
      fromAmount: BigNumberish,
      minTempleReceived: BigNumberish,
      ammDeadline: BigNumberish,
      swapTarget: string,
      swapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapInWithPermit(
      fromToken: string,
      fromAmount: BigNumberish,
      minTempleReceived: BigNumberish,
      ammDeadline: BigNumberish,
      swapTarget: string,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "zappedIn(address,uint256)"(
      sender?: string | null,
      amountReceived?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amountReceived: BigNumber }
    >;

    zappedIn(
      sender?: string | null,
      amountReceived?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amountReceived: BigNumber }
    >;
  };

  estimateGas: {
    TEMPLE(overrides?: CallOverrides): Promise<BigNumber>;

    TEMPLE_FRAX_AMM_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    approvedTargets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permittableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermittableTokens(
      tokens: string[],
      isPermittable: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleContractActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAMMRouter(
      _ammRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTemple(
      _temple: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapIn(
      fromToken: string,
      fromAmount: BigNumberish,
      minTempleReceived: BigNumberish,
      ammDeadline: BigNumberish,
      swapTarget: string,
      swapData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapInWithPermit(
      fromToken: string,
      fromAmount: BigNumberish,
      minTempleReceived: BigNumberish,
      ammDeadline: BigNumberish,
      swapTarget: string,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TEMPLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TEMPLE_FRAX_AMM_ROUTER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedTargets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permittableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermittableTokens(
      tokens: string[],
      isPermittable: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleContractActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAMMRouter(
      _ammRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTemple(
      _temple: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapIn(
      fromToken: string,
      fromAmount: BigNumberish,
      minTempleReceived: BigNumberish,
      ammDeadline: BigNumberish,
      swapTarget: string,
      swapData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapInWithPermit(
      fromToken: string,
      fromAmount: BigNumberish,
      minTempleReceived: BigNumberish,
      ammDeadline: BigNumberish,
      swapTarget: string,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
