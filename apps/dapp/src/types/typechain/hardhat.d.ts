/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Burnable__factory>;
    getContractFactory(
      name: "ERC1155Supply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Supply__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "TempleTeamPayments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleTeamPayments__factory>;
    getContractFactory(
      name: "ITempleTWAP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITempleTWAP__factory>;
    getContractFactory(
      name: "ITreasuryIV",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasuryIV__factory>;
    getContractFactory(
      name: "TempleStableAMMRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleStableAMMRouter__factory>;
    getContractFactory(
      name: "TempleUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleUniswapV2Pair__factory>;
    getContractFactory(
      name: "TreasuryIV",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TreasuryIV__factory>;
    getContractFactory(
      name: "Exposure",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Exposure__factory>;
    getContractFactory(
      name: "ILiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidator__factory>;
    getContractFactory(
      name: "JoiningFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JoiningFee__factory>;
    getContractFactory(
      name: "OpsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpsManager__factory>;
    getContractFactory(
      name: "OpsManagerLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpsManagerLib__factory>;
    getContractFactory(
      name: "RebasingERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RebasingERC20__factory>;
    getContractFactory(
      name: "TempleERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleERC20Token__factory>;
    getContractFactory(
      name: "TreasuryFarmingRevenue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TreasuryFarmingRevenue__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "VaultEarlyWithdraw",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultEarlyWithdraw__factory>;
    getContractFactory(
      name: "VaultedTemple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultedTemple__factory>;
    getContractFactory(
      name: "VaultProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultProxy__factory>;
    getContractFactory(
      name: "Faith",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Faith__factory>;
    getContractFactory(
      name: "IExitQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExitQueue__factory>;
    getContractFactory(
      name: "InstantExitQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InstantExitQueue__factory>;
    getContractFactory(
      name: "LockedOGTemple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockedOGTemple__factory>;
    getContractFactory(
      name: "OGTemple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OGTemple__factory>;
    getContractFactory(
      name: "TempleStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleStaking__factory>;
    getContractFactory(
      name: "FakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeERC20__factory>;
    getContractFactory(
      name: "NoopLiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoopLiquidator__factory>;
    getContractFactory(
      name: "NoopVaultedTempleLiquidator",
<<<<<<< HEAD
=======
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoopVaultedTempleLiquidator__factory>;
    getContractFactory(
      name: "TestTreasuryAllocation",
>>>>>>> 4db351e9 (All of xavs work from earlier branch)
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoopVaultedTempleLiquidator__factory>;
    getContractFactory(
      name: "UniswapV2Router02NoEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02NoEth__factory>;
    getContractFactory(
      name: "GenericZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericZap__factory>;
    getContractFactory(
      name: "IBalancerVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalancerVault__factory>;
    getContractFactory(
      name: "ICurveFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurveFactory__factory>;
    getContractFactory(
<<<<<<< HEAD
      name: "ICurvePool",
=======
      name: "IItems",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IItems__factory>;
    getContractFactory(
      name: "Relic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Relic__factory>;
    getContractFactory(
      name: "IRelic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelic__factory>;
    getContractFactory(
      name: "RelicItems",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelicItems__factory>;
    getContractFactory(
      name: "OGTemple",
>>>>>>> 4db351e9 (All of xavs work from earlier branch)
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurvePool__factory>;
    getContractFactory(
      name: "IGenericZaps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericZaps__factory>;
    getContractFactory(
      name: "ITempleStableRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITempleStableRouter__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "EthConstants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthConstants__factory>;
    getContractFactory(
      name: "TempleZaps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleZaps__factory>;
    getContractFactory(
      name: "ZapBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZapBase__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Burnable>;
    getContractAt(
      name: "ERC1155Supply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Supply>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "UniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "TempleTeamPayments",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleTeamPayments>;
    getContractAt(
      name: "ITempleTWAP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITempleTWAP>;
    getContractAt(
      name: "ITreasuryIV",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreasuryIV>;
    getContractAt(
      name: "TempleStableAMMRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleStableAMMRouter>;
    getContractAt(
      name: "TempleUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleUniswapV2Pair>;
    getContractAt(
      name: "TreasuryIV",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TreasuryIV>;
    getContractAt(
      name: "Exposure",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Exposure>;
    getContractAt(
      name: "ILiquidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidator>;
    getContractAt(
      name: "JoiningFee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JoiningFee>;
    getContractAt(
      name: "OpsManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OpsManager>;
    getContractAt(
      name: "OpsManagerLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OpsManagerLib>;
    getContractAt(
      name: "RebasingERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RebasingERC20>;
    getContractAt(
      name: "TempleERC20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleERC20Token>;
    getContractAt(
      name: "TreasuryFarmingRevenue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TreasuryFarmingRevenue>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "VaultEarlyWithdraw",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultEarlyWithdraw>;
    getContractAt(
      name: "VaultedTemple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultedTemple>;
    getContractAt(
      name: "VaultProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultProxy>;
    getContractAt(
      name: "Faith",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Faith>;
    getContractAt(
      name: "IExitQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExitQueue>;
    getContractAt(
      name: "InstantExitQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InstantExitQueue>;
    getContractAt(
      name: "LockedOGTemple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockedOGTemple>;
    getContractAt(
      name: "OGTemple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OGTemple>;
    getContractAt(
      name: "TempleStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleStaking>;
    getContractAt(
      name: "FakeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeERC20>;
    getContractAt(
      name: "NoopLiquidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoopLiquidator>;
    getContractAt(
      name: "NoopVaultedTempleLiquidator",
<<<<<<< HEAD
=======
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoopVaultedTempleLiquidator>;
    getContractAt(
      name: "TestTreasuryAllocation",
>>>>>>> 4db351e9 (All of xavs work from earlier branch)
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoopVaultedTempleLiquidator>;
    getContractAt(
      name: "UniswapV2Router02NoEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02NoEth>;
    getContractAt(
      name: "GenericZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericZap>;
    getContractAt(
      name: "IBalancerVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalancerVault>;
    getContractAt(
      name: "ICurveFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurveFactory>;
    getContractAt(
<<<<<<< HEAD
      name: "ICurvePool",
=======
      name: "IItems",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IItems>;
    getContractAt(
      name: "Relic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Relic>;
    getContractAt(
      name: "IRelic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelic>;
    getContractAt(
      name: "RelicItems",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RelicItems>;
    getContractAt(
      name: "OGTemple",
>>>>>>> 4db351e9 (All of xavs work from earlier branch)
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurvePool>;
    getContractAt(
      name: "IGenericZaps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericZaps>;
    getContractAt(
      name: "ITempleStableRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITempleStableRouter>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "EthConstants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthConstants>;
    getContractAt(
      name: "TempleZaps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleZaps>;
    getContractAt(
      name: "ZapBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZapBase>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
