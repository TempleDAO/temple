/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "AcceleratedExitQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AcceleratedExitQueue__factory>;
    getContractFactory(
      name: "ITempleFraxAMMRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITempleFraxAMMRouter__factory>;
    getContractFactory(
      name: "ITempleFraxAMMRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITempleFraxAMMRouter__factory>;
    getContractFactory(
      name: "ITreasuryManagementProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasuryManagementProxy__factory>;
    getContractFactory(
      name: "TempleFraxAMMOps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleFraxAMMOps__factory>;
    getContractFactory(
      name: "ITempleTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITempleTreasury__factory>;
    getContractFactory(
      name: "ITempleTWAP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITempleTWAP__factory>;
    getContractFactory(
      name: "TempleFraxAMMRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleFraxAMMRouter__factory>;
    getContractFactory(
      name: "TempleIVSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleIVSwap__factory>;
    getContractFactory(
      name: "ITempleTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITempleTreasury__factory>;
    getContractFactory(
      name: "ITempleTWAP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITempleTWAP__factory>;
    getContractFactory(
      name: "TempleStableAMMRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleStableAMMRouter__factory>;
    getContractFactory(
      name: "TempleUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleUniswapV2Pair__factory>;
    getContractFactory(
      name: "AMMWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AMMWhitelist__factory>;
    getContractFactory(
      name: "Exposure",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Exposure__factory>;
    getContractFactory(
      name: "ILiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidator__factory>;
    getContractFactory(
      name: "InstantExitQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InstantExitQueue__factory>;
    getContractFactory(
      name: "JoiningFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JoiningFee__factory>;
    getContractFactory(
      name: "OpsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpsManager__factory>;
    getContractFactory(
      name: "OpsManagerLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpsManagerLib__factory>;
    getContractFactory(
      name: "RebasingERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RebasingERC20__factory>;
    getContractFactory(
      name: "TreasuryFarmingRevenue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TreasuryFarmingRevenue__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "VaultedTemple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultedTemple__factory>;
    getContractFactory(
      name: "VaultProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultProxy__factory>;
    getContractFactory(
      name: "LockedOGTempleDeprecated",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockedOGTempleDeprecated__factory>;
    getContractFactory(
      name: "Devotion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Devotion__factory>;
    getContractFactory(
      name: "Faith",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Faith__factory>;
    getContractFactory(
      name: "FaithMerkleAirdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FaithMerkleAirdrop__factory>;
    getContractFactory(
      name: "IMerkleDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMerkleDistributor__factory>;
    getContractFactory(
      name: "IFaith",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFaith__factory>;
    getContractFactory(
      name: "ExitQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExitQueue__factory>;
    getContractFactory(
      name: "IExitQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExitQueue__factory>;
    getContractFactory(
      name: "FakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeERC20__factory>;
    getContractFactory(
      name: "NoopLiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoopLiquidator__factory>;
    getContractFactory(
      name: "TestTreasuryAllocation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTreasuryAllocation__factory>;
    getContractFactory(
      name: "UniswapV2Router02NoEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02NoEth__factory>;
    getContractFactory(
      name: "ITreasuryAllocation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasuryAllocation__factory>;
    getContractFactory(
      name: "LockedOGTemple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockedOGTemple__factory>;
    getContractFactory(
      name: "MintAllowance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintAllowance__factory>;
    getContractFactory(
      name: "OGTemple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OGTemple__factory>;
    getContractFactory(
      name: "TempleERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleERC20Token__factory>;
    getContractFactory(
      name: "TempleStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleStaking__factory>;
    getContractFactory(
      name: "TempleTeamPayments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleTeamPayments__factory>;
    getContractFactory(
      name: "TempleTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleTreasury__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "UniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "AcceleratedExitQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AcceleratedExitQueue>;
    getContractAt(
      name: "ITempleFraxAMMRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITempleFraxAMMRouter>;
    getContractAt(
      name: "ITempleFraxAMMRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITempleFraxAMMRouter>;
    getContractAt(
      name: "ITreasuryManagementProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreasuryManagementProxy>;
    getContractAt(
      name: "TempleFraxAMMOps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleFraxAMMOps>;
    getContractAt(
      name: "ITempleTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITempleTreasury>;
    getContractAt(
      name: "ITempleTWAP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITempleTWAP>;
    getContractAt(
      name: "TempleFraxAMMRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleFraxAMMRouter>;
    getContractAt(
      name: "TempleIVSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleIVSwap>;
    getContractAt(
      name: "ITempleTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITempleTreasury>;
    getContractAt(
      name: "ITempleTWAP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITempleTWAP>;
    getContractAt(
      name: "TempleStableAMMRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleStableAMMRouter>;
    getContractAt(
      name: "TempleUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleUniswapV2Pair>;
    getContractAt(
      name: "AMMWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AMMWhitelist>;
    getContractAt(
      name: "Exposure",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Exposure>;
    getContractAt(
      name: "ILiquidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidator>;
    getContractAt(
      name: "InstantExitQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InstantExitQueue>;
    getContractAt(
      name: "JoiningFee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JoiningFee>;
    getContractAt(
      name: "OpsManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OpsManager>;
    getContractAt(
      name: "OpsManagerLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OpsManagerLib>;
    getContractAt(
      name: "RebasingERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RebasingERC20>;
    getContractAt(
      name: "TreasuryFarmingRevenue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TreasuryFarmingRevenue>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "VaultedTemple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultedTemple>;
    getContractAt(
      name: "VaultProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultProxy>;
    getContractAt(
      name: "LockedOGTempleDeprecated",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockedOGTempleDeprecated>;
    getContractAt(
      name: "Devotion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Devotion>;
    getContractAt(
      name: "Faith",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Faith>;
    getContractAt(
      name: "FaithMerkleAirdrop",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FaithMerkleAirdrop>;
    getContractAt(
      name: "IMerkleDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMerkleDistributor>;
    getContractAt(
      name: "IFaith",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFaith>;
    getContractAt(
      name: "ExitQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExitQueue>;
    getContractAt(
      name: "IExitQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExitQueue>;
    getContractAt(
      name: "FakeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeERC20>;
    getContractAt(
      name: "NoopLiquidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoopLiquidator>;
    getContractAt(
      name: "TestTreasuryAllocation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTreasuryAllocation>;
    getContractAt(
      name: "UniswapV2Router02NoEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02NoEth>;
    getContractAt(
      name: "ITreasuryAllocation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreasuryAllocation>;
    getContractAt(
      name: "LockedOGTemple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockedOGTemple>;
    getContractAt(
      name: "MintAllowance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintAllowance>;
    getContractAt(
      name: "OGTemple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OGTemple>;
    getContractAt(
      name: "TempleERC20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleERC20Token>;
    getContractAt(
      name: "TempleStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleStaking>;
    getContractAt(
      name: "TempleTeamPayments",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleTeamPayments>;
    getContractAt(
      name: "TempleTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleTreasury>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
