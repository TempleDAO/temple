/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TempleStakingInterface extends utils.Interface {
  contractName: "TempleStaking";
  functions: {
    "EXIT_QUEUE()": FunctionFragment;
    "OG_TEMPLE()": FunctionFragment;
    "TEMPLE()": FunctionFragment;
    "accumulationFactor()": FunctionFragment;
    "balance(uint256)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "epochSizeSeconds()": FunctionFragment;
    "epy()": FunctionFragment;
    "getAccumulationFactor(uint256)": FunctionFragment;
    "getEpy(uint256)": FunctionFragment;
    "lastUpdatedEpoch()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEpy(uint256,uint256)": FunctionFragment;
    "setExitQueue(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeFor(address,uint256)": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EXIT_QUEUE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OG_TEMPLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "TEMPLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accumulationFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochSizeSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccumulationFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEpy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitQueue",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "EXIT_QUEUE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OG_TEMPLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TEMPLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accumulationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochSizeSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccumulationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEpy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "AccumulationFactorUpdated(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakeCompleted(address,uint256,uint256)": EventFragment;
    "UnstakeCompleted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccumulationFactorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeCompleted"): EventFragment;
}

export type AccumulationFactorUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    _epochsProcessed: BigNumber;
    _currentEpoch: BigNumber;
    _accumulationFactor: BigNumber;
  }
>;

export type AccumulationFactorUpdatedEventFilter =
  TypedEventFilter<AccumulationFactorUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakeCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _staker: string; _amount: BigNumber; _lockedUntil: BigNumber }
>;

export type StakeCompletedEventFilter = TypedEventFilter<StakeCompletedEvent>;

export type UnstakeCompletedEvent = TypedEvent<
  [string, BigNumber],
  { _staker: string; _amount: BigNumber }
>;

export type UnstakeCompletedEventFilter =
  TypedEventFilter<UnstakeCompletedEvent>;

export interface TempleStaking extends BaseContract {
  contractName: "TempleStaking";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TempleStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXIT_QUEUE(overrides?: CallOverrides): Promise<[string]>;

    OG_TEMPLE(overrides?: CallOverrides): Promise<[string]>;

    TEMPLE(overrides?: CallOverrides): Promise<[string]>;

    accumulationFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    balance(
      amountOgTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochSizeSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    epy(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccumulationFactor(
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpy(
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastUpdatedEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEpy(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExitQueue(
      _EXIT_QUEUE: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      _staker: string,
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _amountOgTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EXIT_QUEUE(overrides?: CallOverrides): Promise<string>;

  OG_TEMPLE(overrides?: CallOverrides): Promise<string>;

  TEMPLE(overrides?: CallOverrides): Promise<string>;

  accumulationFactor(overrides?: CallOverrides): Promise<BigNumber>;

  balance(
    amountOgTemple: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  epochSizeSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  epy(overrides?: CallOverrides): Promise<BigNumber>;

  getAccumulationFactor(
    _scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpy(_scale: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdatedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEpy(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExitQueue(
    _EXIT_QUEUE: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amountTemple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    _staker: string,
    _amountTemple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _amountOgTemple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXIT_QUEUE(overrides?: CallOverrides): Promise<string>;

    OG_TEMPLE(overrides?: CallOverrides): Promise<string>;

    TEMPLE(overrides?: CallOverrides): Promise<string>;

    accumulationFactor(overrides?: CallOverrides): Promise<BigNumber>;

    balance(
      amountOgTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochSizeSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    epy(overrides?: CallOverrides): Promise<BigNumber>;

    getAccumulationFactor(
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpy(_scale: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEpy(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitQueue(_EXIT_QUEUE: string, overrides?: CallOverrides): Promise<void>;

    stake(
      _amountTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeFor(
      _staker: string,
      _amountTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _amountOgTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccumulationFactorUpdated(uint256,uint256,uint256)"(
      _epochsProcessed?: null,
      _currentEpoch?: null,
      _accumulationFactor?: null
    ): AccumulationFactorUpdatedEventFilter;
    AccumulationFactorUpdated(
      _epochsProcessed?: null,
      _currentEpoch?: null,
      _accumulationFactor?: null
    ): AccumulationFactorUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StakeCompleted(address,uint256,uint256)"(
      _staker?: null,
      _amount?: null,
      _lockedUntil?: null
    ): StakeCompletedEventFilter;
    StakeCompleted(
      _staker?: null,
      _amount?: null,
      _lockedUntil?: null
    ): StakeCompletedEventFilter;

    "UnstakeCompleted(address,uint256)"(
      _staker?: null,
      _amount?: null
    ): UnstakeCompletedEventFilter;
    UnstakeCompleted(
      _staker?: null,
      _amount?: null
    ): UnstakeCompletedEventFilter;
  };

  estimateGas: {
    EXIT_QUEUE(overrides?: CallOverrides): Promise<BigNumber>;

    OG_TEMPLE(overrides?: CallOverrides): Promise<BigNumber>;

    TEMPLE(overrides?: CallOverrides): Promise<BigNumber>;

    accumulationFactor(overrides?: CallOverrides): Promise<BigNumber>;

    balance(
      amountOgTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochSizeSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    epy(overrides?: CallOverrides): Promise<BigNumber>;

    getAccumulationFactor(
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpy(_scale: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEpy(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExitQueue(
      _EXIT_QUEUE: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeFor(
      _staker: string,
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _amountOgTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXIT_QUEUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OG_TEMPLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TEMPLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accumulationFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balance(
      amountOgTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochSizeSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccumulationFactor(
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpy(
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdatedEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEpy(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExitQueue(
      _EXIT_QUEUE: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      _staker: string,
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _amountOgTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
