/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ExitQueueInterface extends utils.Interface {
  contractName: "ExitQueue";
  functions: {
    "TEMPLE()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "currentEpochAllocation(address,uint256)": FunctionFragment;
    "epochSize()": FunctionFragment;
    "firstBlock()": FunctionFragment;
    "join(address,uint256)": FunctionFragment;
    "maxPerAddress()": FunctionFragment;
    "maxPerEpoch()": FunctionFragment;
    "migrate(address,uint256[],uint256,address)": FunctionFragment;
    "nextUnallocatedEpoch()": FunctionFragment;
    "owedTemple(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEpochSize(uint256)": FunctionFragment;
    "setMaxPerAddress(uint256)": FunctionFragment;
    "setMaxPerEpoch(uint256)": FunctionFragment;
    "setOwedTemple(address[],uint256[])": FunctionFragment;
    "setStartingBlock(uint256)": FunctionFragment;
    "totalPerEpoch(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userData(address)": FunctionFragment;
    "withdrawEpochs(uint256[],uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TEMPLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochAllocation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "epochSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextUnallocatedEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owedTemple", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwedTemple",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartingBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPerEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawEpochs",
    values: [BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "TEMPLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "firstBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextUnallocatedEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owedTemple", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwedTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEpochs",
    data: BytesLike
  ): Result;

  events: {
    "JoinQueue(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JoinQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export type JoinQueueEvent = TypedEvent<
  [string, BigNumber],
  { exiter: string; amount: BigNumber }
>;

export type JoinQueueEventFilter = TypedEventFilter<JoinQueueEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type WithdrawalEvent = TypedEvent<
  [string, BigNumber],
  { exiter: string; amount: BigNumber }
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface ExitQueue extends BaseContract {
  contractName: "ExitQueue";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExitQueueInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TEMPLE(overrides?: CallOverrides): Promise<[string]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpochAllocation(
      _exiter: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    join(
      _exiter: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxPerAddress(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPerEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrate(
      exiter: string,
      epochs: BigNumberish[],
      length: BigNumberish,
      newExitQueue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextUnallocatedEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    owedTemple(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEpochSize(
      _epochSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPerAddress(
      _maxPerAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPerEpoch(
      _maxPerEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwedTemple(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStartingBlock(
      _firstBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalPerEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        Amount: BigNumber;
        FirstExitEpoch: BigNumber;
        LastExitEpoch: BigNumber;
      }
    >;

    withdrawEpochs(
      epochs: BigNumberish[],
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TEMPLE(overrides?: CallOverrides): Promise<string>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpochAllocation(
    _exiter: string,
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochSize(overrides?: CallOverrides): Promise<BigNumber>;

  firstBlock(overrides?: CallOverrides): Promise<BigNumber>;

  join(
    _exiter: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

  maxPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  migrate(
    exiter: string,
    epochs: BigNumberish[],
    length: BigNumberish,
    newExitQueue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextUnallocatedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  owedTemple(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEpochSize(
    _epochSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPerAddress(
    _maxPerAddress: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPerEpoch(
    _maxPerEpoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwedTemple(
    _users: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStartingBlock(
    _firstBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalPerEpoch(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      Amount: BigNumber;
      FirstExitEpoch: BigNumber;
      LastExitEpoch: BigNumber;
    }
  >;

  withdrawEpochs(
    epochs: BigNumberish[],
    length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TEMPLE(overrides?: CallOverrides): Promise<string>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochAllocation(
      _exiter: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochSize(overrides?: CallOverrides): Promise<BigNumber>;

    firstBlock(overrides?: CallOverrides): Promise<BigNumber>;

    join(
      _exiter: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      exiter: string,
      epochs: BigNumberish[],
      length: BigNumberish,
      newExitQueue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nextUnallocatedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owedTemple(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEpochSize(
      _epochSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPerAddress(
      _maxPerAddress: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPerEpoch(
      _maxPerEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwedTemple(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setStartingBlock(
      _firstBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalPerEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        Amount: BigNumber;
        FirstExitEpoch: BigNumber;
        LastExitEpoch: BigNumber;
      }
    >;

    withdrawEpochs(
      epochs: BigNumberish[],
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "JoinQueue(address,uint256)"(
      exiter?: null,
      amount?: null
    ): JoinQueueEventFilter;
    JoinQueue(exiter?: null, amount?: null): JoinQueueEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Withdrawal(address,uint256)"(
      exiter?: null,
      amount?: null
    ): WithdrawalEventFilter;
    Withdrawal(exiter?: null, amount?: null): WithdrawalEventFilter;
  };

  estimateGas: {
    TEMPLE(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochAllocation(
      _exiter: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochSize(overrides?: CallOverrides): Promise<BigNumber>;

    firstBlock(overrides?: CallOverrides): Promise<BigNumber>;

    join(
      _exiter: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      exiter: string,
      epochs: BigNumberish[],
      length: BigNumberish,
      newExitQueue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextUnallocatedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owedTemple(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEpochSize(
      _epochSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPerAddress(
      _maxPerAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPerEpoch(
      _maxPerEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwedTemple(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStartingBlock(
      _firstBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalPerEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawEpochs(
      epochs: BigNumberish[],
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TEMPLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpochAllocation(
      _exiter: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(
      _exiter: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxPerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPerEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      exiter: string,
      epochs: BigNumberish[],
      length: BigNumberish,
      newExitQueue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextUnallocatedEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owedTemple(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEpochSize(
      _epochSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPerAddress(
      _maxPerAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPerEpoch(
      _maxPerEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwedTemple(
      _users: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStartingBlock(
      _firstBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalPerEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawEpochs(
      epochs: BigNumberish[],
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
