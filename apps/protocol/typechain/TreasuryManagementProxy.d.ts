/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryManagementProxyInterface extends ethers.utils.Interface {
  functions: {
    "allocateTreasuryStablec(address,uint256)": FunctionFragment;
    "distributeHarvest()": FunctionFragment;
    "ejectTreasuryAllocation(address)": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvestDistributionPercentage()": FunctionFragment;
    "harvestEnabled()": FunctionFragment;
    "mintAndAllocateTemple(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removePool(uint256,address)": FunctionFragment;
    "resetIV()": FunctionFragment;
    "setHarvestDistributionPercentage(uint256)": FunctionFragment;
    "toggleHarvest()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unallocateAndBurnUnusedMintedTemple(address)": FunctionFragment;
    "updateMarkToMarket(address)": FunctionFragment;
    "upsertPool(address,uint96)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocateTreasuryStablec",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ejectTreasuryAllocation",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestDistributionPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndAllocateTemple",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePool",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "resetIV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setHarvestDistributionPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unallocateAndBurnUnusedMintedTemple",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarkToMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upsertPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "allocateTreasuryStablec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ejectTreasuryAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestDistributionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndAllocateTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resetIV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestDistributionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unallocateAndBurnUnusedMintedTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarkToMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upsertPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class TreasuryManagementProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryManagementProxyInterface;

  functions: {
    allocateTreasuryStablec(
      _contract: string,
      amountStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeHarvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ejectTreasuryAllocation(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestDistributionPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvestEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    mintAndAllocateTemple(
      _contract: string,
      amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removePool(
      idx: BigNumberish,
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetIV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestDistributionPercentage(
      _harvestDistributionPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleHarvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unallocateAndBurnUnusedMintedTemple(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarkToMarket(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upsertPool(
      _contract: string,
      _poolHarvestShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allocateTreasuryStablec(
    _contract: string,
    amountStablec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeHarvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ejectTreasuryAllocation(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestDistributionPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  harvestEnabled(overrides?: CallOverrides): Promise<boolean>;

  mintAndAllocateTemple(
    _contract: string,
    amountTemple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removePool(
    idx: BigNumberish,
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetIV(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestDistributionPercentage(
    _harvestDistributionPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleHarvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unallocateAndBurnUnusedMintedTemple(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarkToMarket(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upsertPool(
    _contract: string,
    _poolHarvestShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocateTreasuryStablec(
      _contract: string,
      amountStablec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeHarvest(overrides?: CallOverrides): Promise<void>;

    ejectTreasuryAllocation(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(overrides?: CallOverrides): Promise<void>;

    harvestDistributionPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestEnabled(overrides?: CallOverrides): Promise<boolean>;

    mintAndAllocateTemple(
      _contract: string,
      amountTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removePool(
      idx: BigNumberish,
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resetIV(overrides?: CallOverrides): Promise<void>;

    setHarvestDistributionPercentage(
      _harvestDistributionPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleHarvest(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unallocateAndBurnUnusedMintedTemple(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarkToMarket(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upsertPool(
      _contract: string,
      _poolHarvestShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_contract: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allocateTreasuryStablec(
      _contract: string,
      amountStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeHarvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ejectTreasuryAllocation(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestDistributionPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndAllocateTemple(
      _contract: string,
      amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removePool(
      idx: BigNumberish,
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetIV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestDistributionPercentage(
      _harvestDistributionPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleHarvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unallocateAndBurnUnusedMintedTemple(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarkToMarket(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upsertPool(
      _contract: string,
      _poolHarvestShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocateTreasuryStablec(
      _contract: string,
      amountStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeHarvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ejectTreasuryAllocation(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestDistributionPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAndAllocateTemple(
      _contract: string,
      amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePool(
      idx: BigNumberish,
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetIV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestDistributionPercentage(
      _harvestDistributionPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleHarvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unallocateAndBurnUnusedMintedTemple(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarkToMarket(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upsertPool(
      _contract: string,
      _poolHarvestShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
