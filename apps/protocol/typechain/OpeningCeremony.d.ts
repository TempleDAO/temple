/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OpeningCeremonyInterface extends ethers.utils.Interface {
  functions: {
    "CAN_ADD_VERIFIED_USER()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addGuestUser(address)": FunctionFragment;
    "addVerifiedUser(address)": FunctionFragment;
    "addVerifier(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "globalDoublingIndex()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "guestBonusFactor()": FunctionFragment;
    "harvestThresholdStablec()": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "inviteThresholdStablec()": FunctionFragment;
    "lastUpdatedTimestamp()": FunctionFragment;
    "limitStablec()": FunctionFragment;
    "limitTemple()": FunctionFragment;
    "lockedOGTemple()": FunctionFragment;
    "maxInvitesPerVerifiedUser()": FunctionFragment;
    "maxSacrificableStablec(uint256)": FunctionFragment;
    "mintAndStake(uint256)": FunctionFragment;
    "mintAndStakeFor(address,uint256)": FunctionFragment;
    "mintMultiple()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeVerifier(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setGuestBonusFactor(uint256,uint256)": FunctionFragment;
    "setHarvestThreshold(uint256)": FunctionFragment;
    "setInviteThreshold(uint256)": FunctionFragment;
    "setLimitStablec(uint256,uint256,uint256)": FunctionFragment;
    "setLimitTemple(uint256,uint256)": FunctionFragment;
    "setMaxInvitesPerVerifiedUser(uint256)": FunctionFragment;
    "setMintMultiple(uint256)": FunctionFragment;
    "setUnlockDelay(uint256)": FunctionFragment;
    "setVerifiedBonusFactor(uint256,uint256)": FunctionFragment;
    "stablecToken()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeFor(address,uint256)": FunctionFragment;
    "staking()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "templeToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "treasuryManagement()": FunctionFragment;
    "unlockDelaySeconds()": FunctionFragment;
    "unpause()": FunctionFragment;
    "users(address)": FunctionFragment;
    "verifiedBonusFactor()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CAN_ADD_VERIFIED_USER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addGuestUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifiedUser",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addVerifier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalDoublingIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "guestBonusFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestThresholdStablec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "inviteThresholdStablec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitStablec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitTemple",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedOGTemple",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxInvitesPerVerifiedUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSacrificableStablec",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStakeFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMultiple",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuestBonusFactor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInviteThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitStablec",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitTemple",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxInvitesPerVerifiedUser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintMultiple",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnlockDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifiedBonusFactor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "templeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockDelaySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(
    functionFragment: "verifiedBonusFactor",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CAN_ADD_VERIFIED_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGuestUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVerifiedUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalDoublingIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guestBonusFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestThresholdStablec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inviteThresholdStablec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitStablec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedOGTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxInvitesPerVerifiedUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSacrificableStablec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStakeFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGuestBonusFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInviteThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitStablec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxInvitesPerVerifiedUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnlockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifiedBonusFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stablecToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockDelaySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifiedBonusFactor",
    data: BytesLike
  ): Result;

  events: {
    "MintComplete(address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StakeComplete(address,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "VerifiedUserAdded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifiedUserAdded"): EventFragment;
}

export type MintCompleteEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    minter: string;
    acceptedStablec: BigNumber;
    mintedTemple: BigNumber;
    bonusTemple: BigNumber;
    mintedOGTemple: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type StakeCompleteEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    staker: string;
    acceptedTemple: BigNumber;
    bonusTemple: BigNumber;
    mintedOGTemple: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type VerifiedUserAddedEvent = TypedEvent<[string] & { user: string }>;

export class OpeningCeremony extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OpeningCeremonyInterface;

  functions: {
    CAN_ADD_VERIFIED_USER(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addGuestUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVerifiedUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVerifier(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    globalDoublingIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    guestBonusFactor(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    harvestThresholdStablec(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    inviteThresholdStablec(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdatedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    limitStablec(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        guestMax: BigNumber;
        verifiedMax: BigNumber;
        verifiedDayOne: BigNumber;
      }
    >;

    limitTemple(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        guestMax: BigNumber;
        verifiedMax: BigNumber;
        verifiedDayOne: BigNumber;
      }
    >;

    lockedOGTemple(overrides?: CallOverrides): Promise<[string]>;

    maxInvitesPerVerifiedUser(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSacrificableStablec(
      doublingIndexAtVerification: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxLimit: BigNumber }>;

    mintAndStake(
      _amountPaidStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndStakeFor(
      _staker: string,
      _amountPaidStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintMultiple(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeVerifier(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGuestBonusFactor(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestThreshold(
      _harvestThresholdStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInviteThreshold(
      _inviteThresholdStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitStablec(
      guestMax: BigNumberish,
      verifiedMax: BigNumberish,
      verifiedDayOne: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitTemple(
      guestMax: BigNumberish,
      verifiedMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxInvitesPerVerifiedUser(
      _maxInvitesPerVerifiedUser: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintMultiple(
      _mintMultiple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnlockDelay(
      _unlockDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVerifiedBonusFactor(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stablecToken(overrides?: CallOverrides): Promise<[string]>;

    stake(
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      _staker: string,
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    templeToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    treasuryManagement(overrides?: CallOverrides): Promise<[string]>;

    unlockDelaySeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, number, BigNumber, BigNumber, BigNumber] & {
        isVerified: boolean;
        isGuest: boolean;
        numInvited: number;
        doublingIndexAtVerification: BigNumber;
        totalSacrificedStablec: BigNumber;
        totalSacrificedTemple: BigNumber;
      }
    >;

    verifiedBonusFactor(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;
  };

  CAN_ADD_VERIFIED_USER(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addGuestUser(
    userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVerifiedUser(
    userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVerifier(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  globalDoublingIndex(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  guestBonusFactor(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  harvestThresholdStablec(overrides?: CallOverrides): Promise<BigNumber>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inviteThresholdStablec(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdatedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  limitStablec(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      guestMax: BigNumber;
      verifiedMax: BigNumber;
      verifiedDayOne: BigNumber;
    }
  >;

  limitTemple(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      guestMax: BigNumber;
      verifiedMax: BigNumber;
      verifiedDayOne: BigNumber;
    }
  >;

  lockedOGTemple(overrides?: CallOverrides): Promise<string>;

  maxInvitesPerVerifiedUser(overrides?: CallOverrides): Promise<BigNumber>;

  maxSacrificableStablec(
    doublingIndexAtVerification: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintAndStake(
    _amountPaidStablec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndStakeFor(
    _staker: string,
    _amountPaidStablec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintMultiple(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeVerifier(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGuestBonusFactor(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestThreshold(
    _harvestThresholdStablec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInviteThreshold(
    _inviteThresholdStablec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitStablec(
    guestMax: BigNumberish,
    verifiedMax: BigNumberish,
    verifiedDayOne: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitTemple(
    guestMax: BigNumberish,
    verifiedMax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxInvitesPerVerifiedUser(
    _maxInvitesPerVerifiedUser: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintMultiple(
    _mintMultiple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnlockDelay(
    _unlockDelaySeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVerifiedBonusFactor(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stablecToken(overrides?: CallOverrides): Promise<string>;

  stake(
    _amountTemple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    _staker: string,
    _amountTemple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staking(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  templeToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  treasuryManagement(overrides?: CallOverrides): Promise<string>;

  unlockDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, number, BigNumber, BigNumber, BigNumber] & {
      isVerified: boolean;
      isGuest: boolean;
      numInvited: number;
      doublingIndexAtVerification: BigNumber;
      totalSacrificedStablec: BigNumber;
      totalSacrificedTemple: BigNumber;
    }
  >;

  verifiedBonusFactor(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  callStatic: {
    CAN_ADD_VERIFIED_USER(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addGuestUser(userAddress: string, overrides?: CallOverrides): Promise<void>;

    addVerifiedUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addVerifier(account: string, overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    globalDoublingIndex(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    guestBonusFactor(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    harvestThresholdStablec(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inviteThresholdStablec(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    limitStablec(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        guestMax: BigNumber;
        verifiedMax: BigNumber;
        verifiedDayOne: BigNumber;
      }
    >;

    limitTemple(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        guestMax: BigNumber;
        verifiedMax: BigNumber;
        verifiedDayOne: BigNumber;
      }
    >;

    lockedOGTemple(overrides?: CallOverrides): Promise<string>;

    maxInvitesPerVerifiedUser(overrides?: CallOverrides): Promise<BigNumber>;

    maxSacrificableStablec(
      doublingIndexAtVerification: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndStake(
      _amountPaidStablec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndStakeFor(
      _staker: string,
      _amountPaidStablec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMultiple(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeVerifier(account: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuestBonusFactor(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHarvestThreshold(
      _harvestThresholdStablec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInviteThreshold(
      _inviteThresholdStablec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimitStablec(
      guestMax: BigNumberish,
      verifiedMax: BigNumberish,
      verifiedDayOne: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimitTemple(
      guestMax: BigNumberish,
      verifiedMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxInvitesPerVerifiedUser(
      _maxInvitesPerVerifiedUser: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintMultiple(
      _mintMultiple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnlockDelay(
      _unlockDelaySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifiedBonusFactor(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stablecToken(overrides?: CallOverrides): Promise<string>;

    stake(
      _amountTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFor(
      _staker: string,
      _amountTemple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    staking(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    templeToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    treasuryManagement(overrides?: CallOverrides): Promise<string>;

    unlockDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, number, BigNumber, BigNumber, BigNumber] & {
        isVerified: boolean;
        isGuest: boolean;
        numInvited: number;
        doublingIndexAtVerification: BigNumber;
        totalSacrificedStablec: BigNumber;
        totalSacrificedTemple: BigNumber;
      }
    >;

    verifiedBonusFactor(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;
  };

  filters: {
    "MintComplete(address,uint256,uint256,uint256,uint256)"(
      minter?: null,
      acceptedStablec?: null,
      mintedTemple?: null,
      bonusTemple?: null,
      mintedOGTemple?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        minter: string;
        acceptedStablec: BigNumber;
        mintedTemple: BigNumber;
        bonusTemple: BigNumber;
        mintedOGTemple: BigNumber;
      }
    >;

    MintComplete(
      minter?: null,
      acceptedStablec?: null,
      mintedTemple?: null,
      bonusTemple?: null,
      mintedOGTemple?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        minter: string;
        acceptedStablec: BigNumber;
        mintedTemple: BigNumber;
        bonusTemple: BigNumber;
        mintedOGTemple: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "StakeComplete(address,uint256,uint256,uint256)"(
      staker?: null,
      acceptedTemple?: null,
      bonusTemple?: null,
      mintedOGTemple?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        staker: string;
        acceptedTemple: BigNumber;
        bonusTemple: BigNumber;
        mintedOGTemple: BigNumber;
      }
    >;

    StakeComplete(
      staker?: null,
      acceptedTemple?: null,
      bonusTemple?: null,
      mintedOGTemple?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        staker: string;
        acceptedTemple: BigNumber;
        bonusTemple: BigNumber;
        mintedOGTemple: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "VerifiedUserAdded(address)"(
      user?: null
    ): TypedEventFilter<[string], { user: string }>;

    VerifiedUserAdded(
      user?: null
    ): TypedEventFilter<[string], { user: string }>;
  };

  estimateGas: {
    CAN_ADD_VERIFIED_USER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addGuestUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVerifiedUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVerifier(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalDoublingIndex(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    guestBonusFactor(overrides?: CallOverrides): Promise<BigNumber>;

    harvestThresholdStablec(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inviteThresholdStablec(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    limitStablec(overrides?: CallOverrides): Promise<BigNumber>;

    limitTemple(overrides?: CallOverrides): Promise<BigNumber>;

    lockedOGTemple(overrides?: CallOverrides): Promise<BigNumber>;

    maxInvitesPerVerifiedUser(overrides?: CallOverrides): Promise<BigNumber>;

    maxSacrificableStablec(
      doublingIndexAtVerification: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndStake(
      _amountPaidStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndStakeFor(
      _staker: string,
      _amountPaidStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintMultiple(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeVerifier(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGuestBonusFactor(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestThreshold(
      _harvestThresholdStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInviteThreshold(
      _inviteThresholdStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitStablec(
      guestMax: BigNumberish,
      verifiedMax: BigNumberish,
      verifiedDayOne: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitTemple(
      guestMax: BigNumberish,
      verifiedMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxInvitesPerVerifiedUser(
      _maxInvitesPerVerifiedUser: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintMultiple(
      _mintMultiple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnlockDelay(
      _unlockDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVerifiedBonusFactor(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stablecToken(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeFor(
      _staker: string,
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    templeToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryManagement(overrides?: CallOverrides): Promise<BigNumber>;

    unlockDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    verifiedBonusFactor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CAN_ADD_VERIFIED_USER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addGuestUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVerifiedUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVerifier(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalDoublingIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    guestBonusFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestThresholdStablec(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inviteThresholdStablec(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdatedTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitStablec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitTemple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedOGTemple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxInvitesPerVerifiedUser(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSacrificableStablec(
      doublingIndexAtVerification: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAndStake(
      _amountPaidStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndStakeFor(
      _staker: string,
      _amountPaidStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintMultiple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeVerifier(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGuestBonusFactor(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestThreshold(
      _harvestThresholdStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInviteThreshold(
      _inviteThresholdStablec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitStablec(
      guestMax: BigNumberish,
      verifiedMax: BigNumberish,
      verifiedDayOne: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitTemple(
      guestMax: BigNumberish,
      verifiedMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxInvitesPerVerifiedUser(
      _maxInvitesPerVerifiedUser: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintMultiple(
      _mintMultiple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnlockDelay(
      _unlockDelaySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVerifiedBonusFactor(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stablecToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      _staker: string,
      _amountTemple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    templeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryManagement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockDelaySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifiedBonusFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
