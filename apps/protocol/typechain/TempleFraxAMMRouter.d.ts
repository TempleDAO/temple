/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TempleFraxAMMRouterInterface extends ethers.utils.Interface {
  functions: {
    "CAN_ADD_ALLOWED_USER()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DYNAMIC_THRESHOLD_INCREASE_DENOMINATOR()": FunctionFragment;
    "addAllowedUser(address)": FunctionFragment;
    "addLiquidity(uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "allowed(address)": FunctionFragment;
    "dynamicThresholdDecayPerBlock()": FunctionFragment;
    "dynamicThresholdIncreasePct()": FunctionFragment;
    "dynamicThresholdPrice()": FunctionFragment;
    "dynamicThresholdPriceWithDecay()": FunctionFragment;
    "fraxToken()": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "interpolateFromPrice()": FunctionFragment;
    "interpolateToPrice()": FunctionFragment;
    "mintRatioAt(uint256,uint256)": FunctionFragment;
    "openAccessEnabled()": FunctionFragment;
    "owner()": FunctionFragment;
    "pair()": FunctionFragment;
    "priceCrossedBelowDynamicThresholdBlock()": FunctionFragment;
    "quote(uint256,uint256,uint256)": FunctionFragment;
    "removeAllowedUser(address)": FunctionFragment;
    "removeLiquidity(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setDynamicThresholdDecayPerBlock(uint256)": FunctionFragment;
    "setDynamicThresholdIncreasePct(uint256)": FunctionFragment;
    "setInterpolateFromPrice(uint256,uint256)": FunctionFragment;
    "setInterpolateToPrice(uint256,uint256)": FunctionFragment;
    "setProtocolMintEarningsAccount(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapExactFraxForTemple(uint256,uint256,address,uint256)": FunctionFragment;
    "swapExactFraxForTempleQuote(uint256)": FunctionFragment;
    "swapExactTempleForFrax(uint256,uint256,address,uint256)": FunctionFragment;
    "swapExactTempleForFraxQuote(uint256)": FunctionFragment;
    "templeToken()": FunctionFragment;
    "templeTreasury()": FunctionFragment;
    "toggleOpenAccess()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CAN_ADD_ALLOWED_USER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DYNAMIC_THRESHOLD_INCREASE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "allowed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "dynamicThresholdDecayPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicThresholdIncreasePct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicThresholdPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicThresholdPriceWithDecay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fraxToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "interpolateFromPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interpolateToPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintRatioAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openAccessEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceCrossedBelowDynamicThresholdBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDynamicThresholdDecayPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDynamicThresholdIncreasePct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterpolateFromPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterpolateToPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolMintEarningsAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactFraxForTemple",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactFraxForTempleQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTempleForFrax",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTempleForFraxQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "templeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templeTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleOpenAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CAN_ADD_ALLOWED_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DYNAMIC_THRESHOLD_INCREASE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dynamicThresholdDecayPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicThresholdIncreasePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicThresholdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicThresholdPriceWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fraxToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interpolateFromPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interpolateToPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintRatioAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openAccessEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceCrossedBelowDynamicThresholdBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDynamicThresholdDecayPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDynamicThresholdIncreasePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterpolateFromPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterpolateToPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolMintEarningsAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactFraxForTemple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactFraxForTempleQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTempleForFrax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTempleForFraxQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleOpenAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DynamicThresholdChange(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceCrossedBelowDynamicThreshold(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DynamicThresholdChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PriceCrossedBelowDynamicThreshold"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type DynamicThresholdChangeEvent = TypedEvent<
  [BigNumber] & { currDynamicThresholdTemple: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PriceCrossedBelowDynamicThresholdEvent = TypedEvent<
  [BigNumber] & { blockNumber: BigNumber }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class TempleFraxAMMRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TempleFraxAMMRouterInterface;

  functions: {
    CAN_ADD_ALLOWED_USER(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DYNAMIC_THRESHOLD_INCREASE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addAllowedUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    dynamicThresholdDecayPerBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dynamicThresholdIncreasePct(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dynamicThresholdPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

    dynamicThresholdPriceWithDecay(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

    fraxToken(overrides?: CallOverrides): Promise<[string]>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    interpolateFromPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

    interpolateToPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

    mintRatioAt(
      temple: BigNumberish,
      frax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    openAccessEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    priceCrossedBelowDynamicThresholdBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountB: BigNumber }>;

    removeAllowedUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDynamicThresholdDecayPerBlock(
      _dynamicThresholdDecayPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDynamicThresholdIncreasePct(
      _dynamicThresholdIncreasePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterpolateFromPrice(
      frax: BigNumberish,
      temple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterpolateToPrice(
      frax: BigNumberish,
      temple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolMintEarningsAccount(
      _protocolMintEarningsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapExactFraxForTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactFraxForTempleQuote(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInAMM: BigNumber;
        amountInProtocol: BigNumber;
        amountOutAMM: BigNumber;
        amountOutProtocol: BigNumber;
      }
    >;

    swapExactTempleForFrax(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTempleForFraxQuote(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        priceBelowIV: boolean;
        willCrossDynamicThreshold: boolean;
        amountOut: BigNumber;
      }
    >;

    templeToken(overrides?: CallOverrides): Promise<[string]>;

    templeTreasury(overrides?: CallOverrides): Promise<[string]>;

    toggleOpenAccess(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CAN_ADD_ALLOWED_USER(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DYNAMIC_THRESHOLD_INCREASE_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addAllowedUser(
    userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  dynamicThresholdDecayPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  dynamicThresholdIncreasePct(overrides?: CallOverrides): Promise<BigNumber>;

  dynamicThresholdPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

  dynamicThresholdPriceWithDecay(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

  fraxToken(overrides?: CallOverrides): Promise<string>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  interpolateFromPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

  interpolateToPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

  mintRatioAt(
    temple: BigNumberish,
    frax: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  openAccessEnabled(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  priceCrossedBelowDynamicThresholdBlock(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeAllowedUser(
    userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDynamicThresholdDecayPerBlock(
    _dynamicThresholdDecayPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDynamicThresholdIncreasePct(
    _dynamicThresholdIncreasePct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterpolateFromPrice(
    frax: BigNumberish,
    temple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterpolateToPrice(
    frax: BigNumberish,
    temple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolMintEarningsAccount(
    _protocolMintEarningsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapExactFraxForTemple(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactFraxForTempleQuote(
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amountInAMM: BigNumber;
      amountInProtocol: BigNumber;
      amountOutAMM: BigNumber;
      amountOutProtocol: BigNumber;
    }
  >;

  swapExactTempleForFrax(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTempleForFraxQuote(
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      priceBelowIV: boolean;
      willCrossDynamicThreshold: boolean;
      amountOut: BigNumber;
    }
  >;

  templeToken(overrides?: CallOverrides): Promise<string>;

  templeTreasury(overrides?: CallOverrides): Promise<string>;

  toggleOpenAccess(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CAN_ADD_ALLOWED_USER(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DYNAMIC_THRESHOLD_INCREASE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAllowedUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountA: BigNumber;
        amountB: BigNumber;
        liquidity: BigNumber;
      }
    >;

    allowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    dynamicThresholdDecayPerBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dynamicThresholdIncreasePct(overrides?: CallOverrides): Promise<BigNumber>;

    dynamicThresholdPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

    dynamicThresholdPriceWithDecay(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

    fraxToken(overrides?: CallOverrides): Promise<string>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    interpolateFromPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

    interpolateToPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { frax: BigNumber; temple: BigNumber }>;

    mintRatioAt(
      temple: BigNumberish,
      frax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    openAccessEnabled(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    priceCrossedBelowDynamicThresholdBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAllowedUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDynamicThresholdDecayPerBlock(
      _dynamicThresholdDecayPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDynamicThresholdIncreasePct(
      _dynamicThresholdIncreasePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterpolateFromPrice(
      frax: BigNumberish,
      temple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterpolateToPrice(
      frax: BigNumberish,
      temple: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolMintEarningsAccount(
      _protocolMintEarningsAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapExactFraxForTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactFraxForTempleQuote(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInAMM: BigNumber;
        amountInProtocol: BigNumber;
        amountOutAMM: BigNumber;
        amountOutProtocol: BigNumber;
      }
    >;

    swapExactTempleForFrax(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactTempleForFraxQuote(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        priceBelowIV: boolean;
        willCrossDynamicThreshold: boolean;
        amountOut: BigNumber;
      }
    >;

    templeToken(overrides?: CallOverrides): Promise<string>;

    templeTreasury(overrides?: CallOverrides): Promise<string>;

    toggleOpenAccess(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DynamicThresholdChange(uint256)"(
      currDynamicThresholdTemple?: null
    ): TypedEventFilter<[BigNumber], { currDynamicThresholdTemple: BigNumber }>;

    DynamicThresholdChange(
      currDynamicThresholdTemple?: null
    ): TypedEventFilter<[BigNumber], { currDynamicThresholdTemple: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PriceCrossedBelowDynamicThreshold(uint256)"(
      blockNumber?: null
    ): TypedEventFilter<[BigNumber], { blockNumber: BigNumber }>;

    PriceCrossedBelowDynamicThreshold(
      blockNumber?: null
    ): TypedEventFilter<[BigNumber], { blockNumber: BigNumber }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    CAN_ADD_ALLOWED_USER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DYNAMIC_THRESHOLD_INCREASE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAllowedUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    dynamicThresholdDecayPerBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dynamicThresholdIncreasePct(overrides?: CallOverrides): Promise<BigNumber>;

    dynamicThresholdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    dynamicThresholdPriceWithDecay(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fraxToken(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interpolateFromPrice(overrides?: CallOverrides): Promise<BigNumber>;

    interpolateToPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintRatioAt(
      temple: BigNumberish,
      frax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openAccessEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    priceCrossedBelowDynamicThresholdBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAllowedUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDynamicThresholdDecayPerBlock(
      _dynamicThresholdDecayPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDynamicThresholdIncreasePct(
      _dynamicThresholdIncreasePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterpolateFromPrice(
      frax: BigNumberish,
      temple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterpolateToPrice(
      frax: BigNumberish,
      temple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolMintEarningsAccount(
      _protocolMintEarningsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactFraxForTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactFraxForTempleQuote(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactTempleForFrax(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTempleForFraxQuote(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    templeToken(overrides?: CallOverrides): Promise<BigNumber>;

    templeTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    toggleOpenAccess(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAN_ADD_ALLOWED_USER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DYNAMIC_THRESHOLD_INCREASE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAllowedUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dynamicThresholdDecayPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dynamicThresholdIncreasePct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dynamicThresholdPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dynamicThresholdPriceWithDecay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fraxToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interpolateFromPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interpolateToPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintRatioAt(
      temple: BigNumberish,
      frax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openAccessEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceCrossedBelowDynamicThresholdBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAllowedUser(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDynamicThresholdDecayPerBlock(
      _dynamicThresholdDecayPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDynamicThresholdIncreasePct(
      _dynamicThresholdIncreasePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterpolateFromPrice(
      frax: BigNumberish,
      temple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterpolateToPrice(
      frax: BigNumberish,
      temple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolMintEarningsAccount(
      _protocolMintEarningsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactFraxForTemple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactFraxForTempleQuote(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactTempleForFrax(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTempleForFraxQuote(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    templeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    templeTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleOpenAccess(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
