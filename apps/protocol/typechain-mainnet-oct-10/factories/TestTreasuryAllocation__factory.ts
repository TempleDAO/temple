/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestTreasuryAllocation,
  TestTreasuryAllocationInterface,
} from "../TestTreasuryAllocation";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "_STABLEC",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200115e3803806200115e833981810160405281019062000037919062000182565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000210565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017c81620001f6565b92915050565b6000602082840312156200019557600080fd5b6000620001a5848285016200016b565b91505092915050565b6000620001bb82620001d6565b9050919050565b6000620001cf82620001ae565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200020181620001c2565b81146200020d57600080fd5b50565b610f3e80620002206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806339509351146100675780633f3a0c5b14610083578063715018a6146100a15780638da5cb5b146100ab578063a9059cbb146100c9578063f2fde38b146100e5575b600080fd5b610081600480360381019061007c919061091b565b610101565b005b61008b610132565b6040516100989190610c26565b60405180910390f35b6100a96101e4565b005b6100b361026c565b6040516100c09190610af7565b60405180910390f35b6100e360048036038101906100de919061091b565b610295565b005b6100ff60048036038101906100fa91906108f2565b6102c6565b005b61012e600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683836103be565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161018f9190610af7565b60206040518083038186803b1580156101a757600080fd5b505afa1580156101bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101df9190610980565b905090565b6101ec6104df565b73ffffffffffffffffffffffffffffffffffffffff1661020a61026c565b73ffffffffffffffffffffffffffffffffffffffff1614610260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025790610bc6565b60405180910390fd5b61026a60006104e7565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102c2600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683836105ab565b5050565b6102ce6104df565b73ffffffffffffffffffffffffffffffffffffffff166102ec61026c565b73ffffffffffffffffffffffffffffffffffffffff1614610342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033990610bc6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a990610b86565b60405180910390fd5b6103bb816104e7565b50565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016103fc929190610b12565b60206040518083038186803b15801561041457600080fd5b505afa158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c9190610980565b6104569190610c73565b90506104d98463095ea7b360e01b8584604051602401610477929190610b3b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610631565b50505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61062c8363a9059cbb60e01b84846040516024016105ca929190610b3b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610631565b505050565b6000610693826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106f89092919063ffffffff16565b90506000815111156106f357808060200190518101906106b39190610957565b6106f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e990610c06565b60405180910390fd5b5b505050565b60606107078484600085610710565b90509392505050565b606082471015610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90610ba6565b60405180910390fd5b61075e85610824565b61079d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079490610be6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107c69190610ae0565b60006040518083038185875af1925050503d8060008114610803576040519150601f19603f3d011682016040523d82523d6000602084013e610808565b606091505b5091509150610818828286610837565b92505050949350505050565b600080823b905060008111915050919050565b6060831561084757829050610897565b60008351111561085a5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e9190610b64565b60405180910390fd5b9392505050565b6000813590506108ad81610ec3565b92915050565b6000815190506108c281610eda565b92915050565b6000813590506108d781610ef1565b92915050565b6000815190506108ec81610ef1565b92915050565b60006020828403121561090457600080fd5b60006109128482850161089e565b91505092915050565b6000806040838503121561092e57600080fd5b600061093c8582860161089e565b925050602061094d858286016108c8565b9150509250929050565b60006020828403121561096957600080fd5b6000610977848285016108b3565b91505092915050565b60006020828403121561099257600080fd5b60006109a0848285016108dd565b91505092915050565b6109b281610cc9565b82525050565b60006109c382610c41565b6109cd8185610c57565b93506109dd818560208601610d11565b80840191505092915050565b60006109f482610c4c565b6109fe8185610c62565b9350610a0e818560208601610d11565b610a1781610d73565b840191505092915050565b6000610a2f602683610c62565b9150610a3a82610d84565b604082019050919050565b6000610a52602683610c62565b9150610a5d82610dd3565b604082019050919050565b6000610a75602083610c62565b9150610a8082610e22565b602082019050919050565b6000610a98601d83610c62565b9150610aa382610e4b565b602082019050919050565b6000610abb602a83610c62565b9150610ac682610e74565b604082019050919050565b610ada81610d07565b82525050565b6000610aec82846109b8565b915081905092915050565b6000602082019050610b0c60008301846109a9565b92915050565b6000604082019050610b2760008301856109a9565b610b3460208301846109a9565b9392505050565b6000604082019050610b5060008301856109a9565b610b5d6020830184610ad1565b9392505050565b60006020820190508181036000830152610b7e81846109e9565b905092915050565b60006020820190508181036000830152610b9f81610a22565b9050919050565b60006020820190508181036000830152610bbf81610a45565b9050919050565b60006020820190508181036000830152610bdf81610a68565b9050919050565b60006020820190508181036000830152610bff81610a8b565b9050919050565b60006020820190508181036000830152610c1f81610aae565b9050919050565b6000602082019050610c3b6000830184610ad1565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610c7e82610d07565b9150610c8983610d07565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cbe57610cbd610d44565b5b828201905092915050565b6000610cd482610ce7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610d2f578082015181840152602081019050610d14565b83811115610d3e576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b610ecc81610cc9565b8114610ed757600080fd5b50565b610ee381610cdb565b8114610eee57600080fd5b50565b610efa81610d07565b8114610f0557600080fd5b5056fea2646970667358221220473799b90463a94468826c45cce03b1a93343742cef28875fc7d78dde88378c064736f6c63430008040033";

export class TestTreasuryAllocation__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _STABLEC: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestTreasuryAllocation> {
    return super.deploy(
      _STABLEC,
      overrides || {}
    ) as Promise<TestTreasuryAllocation>;
  }
  getDeployTransaction(
    _STABLEC: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_STABLEC, overrides || {});
  }
  attach(address: string): TestTreasuryAllocation {
    return super.attach(address) as TestTreasuryAllocation;
  }
  connect(signer: Signer): TestTreasuryAllocation__factory {
    return super.connect(signer) as TestTreasuryAllocation__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTreasuryAllocationInterface {
    return new utils.Interface(_abi) as TestTreasuryAllocationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTreasuryAllocation {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestTreasuryAllocation;
  }
}
