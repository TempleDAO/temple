/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ExitQueue, ExitQueueInterface } from "../ExitQueue";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_TEMPLE",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_maxPerEpoch",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxPerAddress",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_epochSize",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "exiter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "JoinQueue",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "exiter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "TEMPLE",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_exiter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_epoch",
        type: "uint256",
      },
    ],
    name: "currentEpochAllocation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "epochSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "firstBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_exiter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "join",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxPerAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxPerEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextUnallocatedEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_epochSize",
        type: "uint256",
      },
    ],
    name: "setEpochSize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxPerAddress",
        type: "uint256",
      },
    ],
    name: "setMaxPerAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxPerEpoch",
        type: "uint256",
      },
    ],
    name: "setMaxPerEpoch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_firstBlock",
        type: "uint256",
      },
    ],
    name: "setStartingBlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "totalPerEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userData",
    outputs: [
      {
        internalType: "uint256",
        name: "Amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "FirstExitEpoch",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "LastExitEpoch",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001d5a38038062001d5a8339818101604052810190620000379190620001c0565b620000576200004b620000c660201b60201c565b620000ce60201b60201c565b83600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826004819055508160058190555080600681905550436007819055506000600881905550505050506200029e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001a3816200026a565b92915050565b600081519050620001ba8162000284565b92915050565b60008060008060808587031215620001d757600080fd5b6000620001e78782880162000192565b9450506020620001fa87828801620001a9565b93505060406200020d87828801620001a9565b92505060606200022087828801620001a9565b91505092959194509250565b6000620002398262000240565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b62000275816200022c565b81146200028157600080fd5b50565b6200028f8162000260565b81146200029b57600080fd5b50565b611aac80620002ae6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806376671808116100ad578063ba6e27cd11610071578063ba6e27cd146102c0578063c8910913146102f0578063ec17b20e14610322578063f2fde38b1461033e578063f7b5ef781461035a57610121565b8063766718081461022e5780637bddd65b1461024c5780637f03944d146102685780638da5cb5b14610286578063aaebf699146102a457610121565b80633b4da69f116100f45780633b4da69f146101ae57806350e23d00146101ca578063572d356e146101e8578063639814e014610206578063715018a61461022457610121565b806302dccf67146101265780630404cc2714610144578063231b0268146101745780632e1a7d4d14610192575b600080fd5b61012e610376565b60405161013b91906115de565b60405180910390f35b61015e600480360381019061015991906111d2565b61037c565b60405161016b91906115de565b60405180910390f35b61017c6103da565b60405161018991906115de565b60405180910390f35b6101ac60048036038101906101a79190611237565b6103e0565b005b6101c860048036038101906101c391906111d2565b6105b7565b005b6101d2610881565b6040516101df91906114a1565b60405180910390f35b6101f06108a7565b6040516101fd91906115de565b60405180910390f35b61020e6108ad565b60405161021b91906115de565b60405180910390f35b61022c6108b3565b005b61023661093b565b60405161024391906115de565b60405180910390f35b61026660048036038101906102619190611237565b61095d565b005b6102706109e3565b60405161027d91906115de565b60405180910390f35b61028e6109e9565b60405161029b9190611426565b60405180910390f35b6102be60048036038101906102b99190611237565b610a12565b005b6102da60048036038101906102d59190611237565b610a98565b6040516102e791906115de565b60405180910390f35b61030a600480360381019061030591906111a9565b610ab0565b604051610319939291906115f9565b60405180910390f35b61033c60048036038101906103379190611237565b610ada565b005b610358600480360381019061035391906111a9565b610ba4565b005b610374600480360381019061036f9190611237565b610c9c565b005b60085481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600083815260200190815260200160002054905092915050565b60075481565b6103e861093b565b8110610429576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104209061157e565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600301600084815260200190815260200160002054905081600301600084815260200190815260200160002060009055806001600085815260200190815260200160002060008282546104c291906116e9565b92505081905550808260000160008282546104dd91906116e9565b9250508190555060008260000154141561054c57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160009055600282016000905550505b610579600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383610d22565b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6533826040516105aa929190611478565b60405180910390a1505050565b600081116105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f1906114de565b60405180910390fd5b61060261093b565b600854101561061a5761061361093b565b6008819055505b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000829050600060085490506000819050808460020154111561068257836002015490505b5b600083111561080b57600083905060055481866003016000858152602001908152602001600020546106b59190611662565b11156106e157846003016000838152602001908152602001600020546005546106de91906116e9565b90505b6004548160016000858152602001908152602001600020546107039190611662565b111561072d57600160008381526020019081526020016000205460045461072a91906116e9565b90505b60008111156107f65760008560000154141561074d578185600101819055505b808560000160008282546107619190611662565b9250508190555080856003016000848152602001908152602001600020600082825461078d9190611662565b92505081905550806001600084815260200190815260200160002060008282546107b79190611662565b925050819055508185600201819055506004546001600084815260200190815260200160002054106107e7578192505b80846107f391906116e9565b93505b6001826108039190611662565b915050610683565b81600881905550610840600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333088610da8565b7f127a46d7e37bf0e11e49550713ba0828af1934ddea28244400d95f55bbc912d28686604051610871929190611478565b60405180910390a1505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60055481565b6108bb610e31565b73ffffffffffffffffffffffffffffffffffffffff166108d96109e9565b73ffffffffffffffffffffffffffffffffffffffff161461092f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109269061155e565b60405180910390fd5b6109396000610e39565b565b60006006546007544361094e91906116e9565b61095891906116b8565b905090565b610965610e31565b73ffffffffffffffffffffffffffffffffffffffff166109836109e9565b73ffffffffffffffffffffffffffffffffffffffff16146109d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d09061155e565b60405180910390fd5b8060058190555050565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a1a610e31565b73ffffffffffffffffffffffffffffffffffffffff16610a386109e9565b73ffffffffffffffffffffffffffffffffffffffff1614610a8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a859061155e565b60405180910390fd5b8060048190555050565b60016020528060005260406000206000915090505481565b60026020528060005260406000206000915090508060000154908060010154908060020154905083565b610ae2610e31565b73ffffffffffffffffffffffffffffffffffffffff16610b006109e9565b73ffffffffffffffffffffffffffffffffffffffff1614610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d9061155e565b60405180910390fd5b6007548110610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b919061151e565b60405180910390fd5b8060078190555050565b610bac610e31565b73ffffffffffffffffffffffffffffffffffffffff16610bca6109e9565b73ffffffffffffffffffffffffffffffffffffffff1614610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c179061155e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c87906114fe565b60405180910390fd5b610c9981610e39565b50565b610ca4610e31565b73ffffffffffffffffffffffffffffffffffffffff16610cc26109e9565b73ffffffffffffffffffffffffffffffffffffffff1614610d18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0f9061155e565b60405180910390fd5b8060068190555050565b610da38363a9059cbb60e01b8484604051602401610d41929190611478565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610efd565b505050565b610e2b846323b872dd60e01b858585604051602401610dc993929190611441565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610efd565b50505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610f5f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610fc49092919063ffffffff16565b9050600081511115610fbf5780806020019051810190610f7f919061120e565b610fbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb5906115be565b60405180910390fd5b5b505050565b6060610fd38484600085610fdc565b90509392505050565b606082471015611021576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110189061153e565b60405180910390fd5b61102a856110f0565b611069576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110609061159e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611092919061140f565b60006040518083038185875af1925050503d80600081146110cf576040519150601f19603f3d011682016040523d82523d6000602084013e6110d4565b606091505b50915091506110e4828286611103565b92505050949350505050565b600080823b905060008111915050919050565b6060831561111357829050611163565b6000835111156111265782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a91906114bc565b60405180910390fd5b9392505050565b60008135905061117981611a31565b92915050565b60008151905061118e81611a48565b92915050565b6000813590506111a381611a5f565b92915050565b6000602082840312156111bb57600080fd5b60006111c98482850161116a565b91505092915050565b600080604083850312156111e557600080fd5b60006111f38582860161116a565b925050602061120485828601611194565b9150509250929050565b60006020828403121561122057600080fd5b600061122e8482850161117f565b91505092915050565b60006020828403121561124957600080fd5b600061125784828501611194565b91505092915050565b6112698161171d565b82525050565b600061127a82611630565b6112848185611646565b9350611294818560208601611789565b80840191505092915050565b6112a981611765565b82525050565b60006112ba8261163b565b6112c48185611651565b93506112d4818560208601611789565b6112dd8161181a565b840191505092915050565b60006112f5601283611651565b91506113008261182b565b602082019050919050565b6000611318602683611651565b915061132382611854565b604082019050919050565b600061133b602b83611651565b9150611346826118a3565b604082019050919050565b600061135e602683611651565b9150611369826118f2565b604082019050919050565b6000611381602083611651565b915061138c82611941565b602082019050919050565b60006113a4602283611651565b91506113af8261196a565b604082019050919050565b60006113c7601d83611651565b91506113d2826119b9565b602082019050919050565b60006113ea602a83611651565b91506113f5826119e2565b604082019050919050565b6114098161175b565b82525050565b600061141b828461126f565b915081905092915050565b600060208201905061143b6000830184611260565b92915050565b60006060820190506114566000830186611260565b6114636020830185611260565b6114706040830184611400565b949350505050565b600060408201905061148d6000830185611260565b61149a6020830184611400565b9392505050565b60006020820190506114b660008301846112a0565b92915050565b600060208201905081810360008301526114d681846112af565b905092915050565b600060208201905081810360008301526114f7816112e8565b9050919050565b600060208201905081810360008301526115178161130b565b9050919050565b600060208201905081810360008301526115378161132e565b9050919050565b6000602082019050818103600083015261155781611351565b9050919050565b6000602082019050818103600083015261157781611374565b9050919050565b6000602082019050818103600083015261159781611397565b9050919050565b600060208201905081810360008301526115b7816113ba565b9050919050565b600060208201905081810360008301526115d7816113dd565b9050919050565b60006020820190506115f36000830184611400565b92915050565b600060608201905061160e6000830186611400565b61161b6020830185611400565b6116286040830184611400565b949350505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061166d8261175b565b91506116788361175b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116ad576116ac6117bc565b5b828201905092915050565b60006116c38261175b565b91506116ce8361175b565b9250826116de576116dd6117eb565b5b828204905092915050565b60006116f48261175b565b91506116ff8361175b565b925082821015611712576117116117bc565b5b828203905092915050565b60006117288261173b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061177082611777565b9050919050565b60006117828261173b565b9050919050565b60005b838110156117a757808201518184015260208101905061178c565b838111156117b6576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f416d6f756e74206d757374206265203e20300000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43616e206f6e6c79206d6f766520737461727420626c6f636b206261636b2c2060008201527f6e6f7420666f7277617264000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e206f6e6c792077697468647261772066726f6d20706173742065706f6360008201527f6873000000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b611a3a8161171d565b8114611a4557600080fd5b50565b611a518161172f565b8114611a5c57600080fd5b50565b611a688161175b565b8114611a7357600080fd5b5056fea26469706673582212202cf16d0e8270138107800962a0c8290a7ba37fbbd471d083b7a546286806528764736f6c63430008040033";

export class ExitQueue__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _TEMPLE: string,
    _maxPerEpoch: BigNumberish,
    _maxPerAddress: BigNumberish,
    _epochSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExitQueue> {
    return super.deploy(
      _TEMPLE,
      _maxPerEpoch,
      _maxPerAddress,
      _epochSize,
      overrides || {}
    ) as Promise<ExitQueue>;
  }
  getDeployTransaction(
    _TEMPLE: string,
    _maxPerEpoch: BigNumberish,
    _maxPerAddress: BigNumberish,
    _epochSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _TEMPLE,
      _maxPerEpoch,
      _maxPerAddress,
      _epochSize,
      overrides || {}
    );
  }
  attach(address: string): ExitQueue {
    return super.attach(address) as ExitQueue;
  }
  connect(signer: Signer): ExitQueue__factory {
    return super.connect(signer) as ExitQueue__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExitQueueInterface {
    return new utils.Interface(_abi) as ExitQueueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExitQueue {
    return new Contract(address, _abi, signerOrProvider) as ExitQueue;
  }
}
