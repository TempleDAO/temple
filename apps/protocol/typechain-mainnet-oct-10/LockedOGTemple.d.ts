/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LockedOGTempleInterface extends ethers.utils.Interface {
  functions: {
    "OG_TEMPLE()": FunctionFragment;
    "lock(uint256,uint256)": FunctionFragment;
    "lockFor(address,uint256,uint256)": FunctionFragment;
    "locked(address,uint256)": FunctionFragment;
    "numLocks(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawFor(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "OG_TEMPLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "numLocks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFor",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "OG_TEMPLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numLocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFor",
    data: BytesLike
  ): Result;

  events: {
    "OGTempleLocked(address,uint256,uint256)": EventFragment;
    "OGTempleWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OGTempleLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OGTempleWithdraw"): EventFragment;
}

export type OGTempleLockedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _staker: string;
    _amount: BigNumber;
    _lockedUntil: BigNumber;
  }
>;

export type OGTempleWithdrawEvent = TypedEvent<
  [string, BigNumber] & { _staker: string; _amount: BigNumber }
>;

export class LockedOGTemple extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LockedOGTempleInterface;

  functions: {
    OG_TEMPLE(overrides?: CallOverrides): Promise<[string]>;

    lock(
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    locked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        BalanceOGTemple: BigNumber;
        LockedUntilTimestamp: BigNumber;
      }
    >;

    numLocks(_staker: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFor(
      _staker: string,
      _idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  OG_TEMPLE(overrides?: CallOverrides): Promise<string>;

  lock(
    _amountOGTemple: BigNumberish,
    _lockedUntilTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockFor(
    _staker: string,
    _amountOGTemple: BigNumberish,
    _lockedUntilTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  locked(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      BalanceOGTemple: BigNumber;
      LockedUntilTimestamp: BigNumber;
    }
  >;

  numLocks(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFor(
    _staker: string,
    _idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    OG_TEMPLE(overrides?: CallOverrides): Promise<string>;

    lock(
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    locked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        BalanceOGTemple: BigNumber;
        LockedUntilTimestamp: BigNumber;
      }
    >;

    numLocks(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_idx: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawFor(
      _staker: string,
      _idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OGTempleLocked(address,uint256,uint256)"(
      _staker?: null,
      _amount?: null,
      _lockedUntil?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _staker: string; _amount: BigNumber; _lockedUntil: BigNumber }
    >;

    OGTempleLocked(
      _staker?: null,
      _amount?: null,
      _lockedUntil?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _staker: string; _amount: BigNumber; _lockedUntil: BigNumber }
    >;

    "OGTempleWithdraw(address,uint256)"(
      _staker?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _staker: string; _amount: BigNumber }
    >;

    OGTempleWithdraw(
      _staker?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _staker: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    OG_TEMPLE(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    locked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numLocks(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFor(
      _staker: string,
      _idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OG_TEMPLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockFor(
      _staker: string,
      _amountOGTemple: BigNumberish,
      _lockedUntilTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    locked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numLocks(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFor(
      _staker: string,
      _idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
