/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryInvestmentDefendInterface extends ethers.utils.Interface {
  functions: {
    "DAI()": FunctionFragment;
    "TEMPLE()": FunctionFragment;
    "campaignJoinEndBlock()": FunctionFragment;
    "campaignStakingEndBlock()": FunctionFragment;
    "closeout()": FunctionFragment;
    "daiRewardsPerShare()": FunctionFragment;
    "getUserBalance(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reval()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "staked(address)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "withdrawDai()": FunctionFragment;
    "withdrawTemple()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "TEMPLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "campaignJoinEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignStakingEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "closeout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daiRewardsPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reval", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "staked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTemple",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TEMPLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "campaignJoinEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignStakingEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daiRewardsPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTemple",
    data: BytesLike
  ): Result;

  events: {
    "DaiClaimed(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakeCompleted(address,uint256)": EventFragment;
    "TempleRestaked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DaiClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TempleRestaked"): EventFragment;
}

export type DaiClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _staker: string;
    _dai: BigNumber;
    _temple: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StakeCompletedEvent = TypedEvent<
  [string, BigNumber] & { _staker: string; _amount: BigNumber }
>;

export type TempleRestakedEvent = TypedEvent<
  [string, BigNumber] & { _staker: string; _amount: BigNumber }
>;

export class TreasuryInvestmentDefend extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryInvestmentDefendInterface;

  functions: {
    DAI(overrides?: CallOverrides): Promise<[string]>;

    TEMPLE(overrides?: CallOverrides): Promise<[string]>;

    campaignJoinEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaignStakingEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    closeout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daiRewardsPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountStaked: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reval(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staked(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    withdrawDai(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTemple(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAI(overrides?: CallOverrides): Promise<string>;

  TEMPLE(overrides?: CallOverrides): Promise<string>;

  campaignJoinEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  campaignStakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  closeout(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daiRewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  getUserBalance(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reval(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  withdrawDai(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTemple(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAI(overrides?: CallOverrides): Promise<string>;

    TEMPLE(overrides?: CallOverrides): Promise<string>;

    campaignJoinEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    campaignStakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    closeout(overrides?: CallOverrides): Promise<void>;

    daiRewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reval(overrides?: CallOverrides): Promise<BigNumber>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    staked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    withdrawDai(overrides?: CallOverrides): Promise<void>;

    withdrawTemple(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DaiClaimed(address,uint256,uint256)"(
      _staker?: null,
      _dai?: null,
      _temple?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _staker: string; _dai: BigNumber; _temple: BigNumber }
    >;

    DaiClaimed(
      _staker?: null,
      _dai?: null,
      _temple?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _staker: string; _dai: BigNumber; _temple: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "StakeCompleted(address,uint256)"(
      _staker?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _staker: string; _amount: BigNumber }
    >;

    StakeCompleted(
      _staker?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _staker: string; _amount: BigNumber }
    >;

    "TempleRestaked(address,uint256)"(
      _staker?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _staker: string; _amount: BigNumber }
    >;

    TempleRestaked(
      _staker?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _staker: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    TEMPLE(overrides?: CallOverrides): Promise<BigNumber>;

    campaignJoinEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    campaignStakingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    closeout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daiRewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reval(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawDai(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTemple(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TEMPLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignJoinEndBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignStakingEndBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daiRewardsPerShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawDai(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTemple(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
