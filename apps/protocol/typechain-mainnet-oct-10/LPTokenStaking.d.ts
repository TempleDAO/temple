/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LPTokenStakingInterface extends ethers.utils.Interface {
  functions: {
    "LP_TOKEN()": FunctionFragment;
    "TEMPLE()": FunctionFragment;
    "TEMPLE_STAKING()": FunctionFragment;
    "accRewardsPerShare()": FunctionFragment;
    "getUserBalance(address)": FunctionFragment;
    "lastRewardBlock()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingRewards(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "restakeTempleRewards()": FunctionFragment;
    "rewardPerBlock()": FunctionFragment;
    "setRewardPerBlock(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake()": FunctionFragment;
    "updatePool()": FunctionFragment;
    "userDetails(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LP_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "TEMPLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TEMPLE_STAKING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accRewardsPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restakeTempleRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userDetails", values: [string]): string;

  decodeFunctionResult(functionFragment: "LP_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TEMPLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TEMPLE_STAKING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accRewardsPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restakeTempleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDetails",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolUpdated(uint256,uint256)": EventFragment;
    "RewardsClaimed(address,uint256,uint256)": EventFragment;
    "RewardsRestaked(address,uint256)": EventFragment;
    "StakeCompleted(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsRestaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeCompleted"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PoolUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    _blocksRewarded: BigNumber;
    _amountRewarded: BigNumber;
  }
>;

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _staker: string;
    _withdrawnAmount: BigNumber;
    _rewardsClaimed: BigNumber;
  }
>;

export type RewardsRestakedEvent = TypedEvent<
  [string, BigNumber] & { _staker: string; _rewardsClaimed: BigNumber }
>;

export type StakeCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _staker: string;
    _amount: BigNumber;
    _totalStaked: BigNumber;
  }
>;

export class LPTokenStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LPTokenStakingInterface;

  functions: {
    LP_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    TEMPLE(overrides?: CallOverrides): Promise<[string]>;

    TEMPLE_STAKING(overrides?: CallOverrides): Promise<[string]>;

    accRewardsPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountStaked: BigNumber }>;

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restakeTempleRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { Deposited: BigNumber; RewardDebt: BigNumber }
    >;
  };

  LP_TOKEN(overrides?: CallOverrides): Promise<string>;

  TEMPLE(overrides?: CallOverrides): Promise<string>;

  TEMPLE_STAKING(overrides?: CallOverrides): Promise<string>;

  accRewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  getUserBalance(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingRewards(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restakeTempleRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setRewardPerBlock(
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDetails(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { Deposited: BigNumber; RewardDebt: BigNumber }
  >;

  callStatic: {
    LP_TOKEN(overrides?: CallOverrides): Promise<string>;

    TEMPLE(overrides?: CallOverrides): Promise<string>;

    TEMPLE_STAKING(overrides?: CallOverrides): Promise<string>;

    accRewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingRewards(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    restakeTempleRewards(overrides?: CallOverrides): Promise<void>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(overrides?: CallOverrides): Promise<void>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    userDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { Deposited: BigNumber; RewardDebt: BigNumber }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PoolUpdated(uint256,uint256)"(
      _blocksRewarded?: null,
      _amountRewarded?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _blocksRewarded: BigNumber; _amountRewarded: BigNumber }
    >;

    PoolUpdated(
      _blocksRewarded?: null,
      _amountRewarded?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _blocksRewarded: BigNumber; _amountRewarded: BigNumber }
    >;

    "RewardsClaimed(address,uint256,uint256)"(
      _staker?: null,
      _withdrawnAmount?: null,
      _rewardsClaimed?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        _staker: string;
        _withdrawnAmount: BigNumber;
        _rewardsClaimed: BigNumber;
      }
    >;

    RewardsClaimed(
      _staker?: null,
      _withdrawnAmount?: null,
      _rewardsClaimed?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        _staker: string;
        _withdrawnAmount: BigNumber;
        _rewardsClaimed: BigNumber;
      }
    >;

    "RewardsRestaked(address,uint256)"(
      _staker?: null,
      _rewardsClaimed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _staker: string; _rewardsClaimed: BigNumber }
    >;

    RewardsRestaked(
      _staker?: null,
      _rewardsClaimed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _staker: string; _rewardsClaimed: BigNumber }
    >;

    "StakeCompleted(address,uint256,uint256)"(
      _staker?: null,
      _amount?: null,
      _totalStaked?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _staker: string; _amount: BigNumber; _totalStaked: BigNumber }
    >;

    StakeCompleted(
      _staker?: null,
      _amount?: null,
      _totalStaked?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _staker: string; _amount: BigNumber; _totalStaked: BigNumber }
    >;
  };

  estimateGas: {
    LP_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    TEMPLE(overrides?: CallOverrides): Promise<BigNumber>;

    TEMPLE_STAKING(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restakeTempleRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDetails(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LP_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TEMPLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TEMPLE_STAKING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accRewardsPerShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restakeTempleRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
