/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ExitQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExitQueue__factory>;
    getContractFactory(
      name: "FakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeERC20__factory>;
    getContractFactory(
      name: "TestTreasuryAllocation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTreasuryAllocation__factory>;
    getContractFactory(
      name: "ITreasuryAllocation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasuryAllocation__factory>;
    getContractFactory(
      name: "LockedOGTemple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockedOGTemple__factory>;
    getContractFactory(
      name: "LPTokenStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPTokenStaking__factory>;
    getContractFactory(
      name: "MintAllowance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintAllowance__factory>;
    getContractFactory(
      name: "OGTemple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OGTemple__factory>;
    getContractFactory(
      name: "Presale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Presale__factory>;
    getContractFactory(
      name: "PresaleAllocation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PresaleAllocation__factory>;
    getContractFactory(
      name: "TempleERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleERC20Token__factory>;
    getContractFactory(
      name: "TempleStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleStaking__factory>;
    getContractFactory(
      name: "TempleTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TempleTreasury__factory>;
    getContractFactory(
      name: "TreasuryInvestmentDefend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TreasuryInvestmentDefend__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ExitQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExitQueue>;
    getContractAt(
      name: "FakeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeERC20>;
    getContractAt(
      name: "TestTreasuryAllocation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTreasuryAllocation>;
    getContractAt(
      name: "ITreasuryAllocation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreasuryAllocation>;
    getContractAt(
      name: "LockedOGTemple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockedOGTemple>;
    getContractAt(
      name: "LPTokenStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPTokenStaking>;
    getContractAt(
      name: "MintAllowance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintAllowance>;
    getContractAt(
      name: "OGTemple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OGTemple>;
    getContractAt(
      name: "Presale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Presale>;
    getContractAt(
      name: "PresaleAllocation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PresaleAllocation>;
    getContractAt(
      name: "TempleERC20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleERC20Token>;
    getContractAt(
      name: "TempleStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleStaking>;
    getContractAt(
      name: "TempleTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TempleTreasury>;
    getContractAt(
      name: "TreasuryInvestmentDefend",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TreasuryInvestmentDefend>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
