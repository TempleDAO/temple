pragma solidity ^0.8.4; // SPDX-License-Identifier: GPL-3.0-or-later

import "./TreasuryManagementProxy.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

/*
* The interface for Chainlink Keepers - see docs: https://docs.chain.link/docs/chainlink-keepers/introduction/
*/
interface KeeperCompatibleInterface {

    function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);

    function performUpkeep(bytes calldata performData) external;
}


/**
 * Autmoate harvest via chainlink keeper for every 2% increase in treasury
 */
contract AutoHarvestKeeper is KeeperCompatibleInterface {
    // Temple treasury (used for direct queri)
    TempleTreasury private treasury;

    // Treasury management
    TreasuryManagementProxy  private treasuryManagement;

    // Underlying STABLEC contract for Treaury
    IERC20 private stablec;

    constructor (TempleTreasury _treasury, TreasuryManagementProxy _treasuryManagementProxy, IERC20 _stablec) {
        treasury = _treasury;
        treasuryManagement = _treasuryManagementProxy;
        stablec  =  _stablec;
    }

    /**
      Chainlink Keeper Function that checks if conditions have been met to perform the next action
     */
    function checkUpkeep(bytes calldata checkData) external view override returns (bool upkeepNeeded, bytes memory performData) {

        (uint256 _stablec, ) = treasury.intrinsicValueRatio();

        bool harvestEnabled = treasuryManagement.harvestEnabled(); 

        uint256 currentTreasury = stablec.balanceOf(address(treasury));

        // Harvest for two percent increase in IV
        upkeepNeeded = harvestEnabled && currentTreasury >= _stablec * 102 /100;

        // We don't use the checkData
        // checkData was defined when the Upkeep was registered
        performData = checkData;
    }

    function performUpkeep(bytes calldata performData) external override {
        // Call temple treasury to do harvest
        treasuryManagement.harvest();

        // We don't use the performData in this example
        // performData is generated by the Keeper's call to your `checkUpkeep` function
        performData;
    }
}
